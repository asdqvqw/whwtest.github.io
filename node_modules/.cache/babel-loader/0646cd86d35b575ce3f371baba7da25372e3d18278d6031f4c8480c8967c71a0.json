{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { h, defineComponent, ref, toRef, Transition, withDirectives, computed, provide, watchEffect } from 'vue';\nimport { VBinder, VFollower, VTarget } from 'vueuc';\nimport { useIsMounted, useMergedState } from 'vooks';\nimport { clickoutside } from 'vdirs';\nimport { createTreeMate } from 'treemate';\nimport { getPreciseEventTarget, happensIn } from 'seemly';\nimport { createTreeMateOptions, treeSharedProps } from '../../tree/src/Tree';\nimport { NInternalSelection, NBaseFocusDetector } from '../../_internal';\nimport { NTree } from '../../tree';\nimport { NEmpty } from '../../empty';\nimport { useConfig, useFormItem, useLocale, useTheme, useThemeClass } from '../../_mixins';\nimport { call, markEventEffectPerformed, resolveSlot, resolveWrappedSlot, useAdjustedTo, useOnResize, warnOnce } from '../../_utils';\nimport { treeSelectLight } from '../styles';\nimport { treeSelectInjectionKey } from './interface';\nimport { treeOption2SelectOption, treeOption2SelectOptionWithPath } from './utils';\nimport style from './styles/index.cssr';\nimport { useMergedCheckStrategy } from '../../tree/src/utils';\nexport const treeSelectProps = Object.assign(Object.assign(Object.assign(Object.assign({}, useTheme.props), {\n  bordered: {\n    type: Boolean,\n    default: true\n  },\n  cascade: Boolean,\n  checkable: Boolean,\n  clearable: Boolean,\n  clearFilterAfterSelect: {\n    type: Boolean,\n    default: true\n  },\n  consistentMenuWidth: {\n    type: Boolean,\n    default: true\n  },\n  defaultShow: Boolean,\n  defaultValue: {\n    type: [String, Number, Array],\n    default: null\n  },\n  disabled: {\n    type: Boolean,\n    default: undefined\n  },\n  filterable: Boolean,\n  checkStrategy: {\n    type: String,\n    default: 'all'\n  },\n  loading: Boolean,\n  maxTagCount: [String, Number],\n  multiple: Boolean,\n  showPath: Boolean,\n  separator: {\n    type: String,\n    default: ' / '\n  },\n  options: {\n    type: Array,\n    default: () => []\n  },\n  placeholder: String,\n  placement: {\n    type: String,\n    default: 'bottom-start'\n  },\n  show: {\n    type: Boolean,\n    default: undefined\n  },\n  size: String,\n  value: [String, Number, Array],\n  to: useAdjustedTo.propTo,\n  menuProps: Object,\n  virtualScroll: {\n    type: Boolean,\n    default: true\n  },\n  status: String,\n  renderTag: Function\n}), treeSharedProps), {\n  renderLabel: Function,\n  renderPrefix: Function,\n  renderSuffix: Function,\n  nodeProps: Function,\n  watchProps: Array,\n  onBlur: Function,\n  onFocus: Function,\n  onLoad: Function,\n  onUpdateShow: [Function, Array],\n  onUpdateValue: [Function, Array],\n  'onUpdate:value': [Function, Array],\n  'onUpdate:show': [Function, Array],\n  /**\n   * @deprecated\n   */\n  leafOnly: Boolean\n});\nexport default defineComponent({\n  name: 'TreeSelect',\n  props: treeSelectProps,\n  setup(props) {\n    if (process.env.NODE_ENV !== 'production') {\n      watchEffect(() => {\n        if (props.leafOnly) {\n          warnOnce('tree-select', '`leaf-only` is deprecated, please use `check-strategy=\"child\"` instead.');\n        }\n      });\n    }\n    const followerInstRef = ref(null);\n    const triggerInstRef = ref(null);\n    const treeInstRef = ref(null);\n    const menuElRef = ref(null);\n    const {\n      mergedClsPrefixRef,\n      namespaceRef,\n      inlineThemeDisabled\n    } = useConfig(props);\n    const {\n      localeRef\n    } = useLocale('Select');\n    const {\n      mergedSizeRef,\n      mergedDisabledRef,\n      mergedStatusRef,\n      nTriggerFormBlur,\n      nTriggerFormChange,\n      nTriggerFormFocus,\n      nTriggerFormInput\n    } = useFormItem(props);\n    const uncontrolledValueRef = ref(props.defaultValue);\n    const controlledValueRef = toRef(props, 'value');\n    const mergedValueRef = useMergedState(controlledValueRef, uncontrolledValueRef);\n    const uncontrolledShowRef = ref(props.defaultShow);\n    const controlledShowRef = toRef(props, 'show');\n    const mergedShowRef = useMergedState(controlledShowRef, uncontrolledShowRef);\n    const patternRef = ref('');\n    const mergedFilterRef = computed(() => {\n      const {\n        filter\n      } = props;\n      if (filter) return filter;\n      const {\n        labelField\n      } = props;\n      return (pattern, node) => {\n        if (!pattern.length) return true;\n        return node[labelField].toLowerCase().includes(pattern.toLowerCase());\n      };\n    });\n    // used to resolve selected options\n    const dataTreeMateRef = computed(() => createTreeMate(props.options, createTreeMateOptions(props.keyField, props.childrenField, props.disabledField, undefined)));\n    const {\n      value: initMergedValue\n    } = mergedValueRef;\n    const pendingNodeKeyRef = ref(props.checkable ? null : Array.isArray(initMergedValue) && initMergedValue.length ? initMergedValue[initMergedValue.length - 1] : null);\n    const mergedCascadeRef = computed(() => {\n      return props.multiple && props.cascade && props.checkable;\n    });\n    // The same logic as tree, now it's not that complex so I don't extract a\n    // function to reuse it.\n    const uncontrolledExpandedKeysRef = ref(props.defaultExpandAll ? undefined // leave it, n-tree will handle it\n    : props.defaultExpandedKeys || props.expandedKeys);\n    const controlledExpandedKeysRef = toRef(props, 'expandedKeys');\n    const mergedExpandedKeysRef = useMergedState(controlledExpandedKeysRef, uncontrolledExpandedKeysRef);\n    const focusedRef = ref(false);\n    const mergedPlaceholderRef = computed(() => {\n      const {\n        placeholder\n      } = props;\n      if (placeholder !== undefined) return placeholder;\n      return localeRef.value.placeholder;\n    });\n    const treeSelectedKeysRef = computed(() => {\n      if (props.checkable) return [];\n      return treeCheckedKeysRef.value;\n    });\n    const treeCheckedKeysRef = computed(() => {\n      const {\n        value: mergedValue\n      } = mergedValueRef;\n      if (props.multiple) {\n        if (Array.isArray(mergedValue)) return mergedValue;else return [];\n      } else {\n        if (mergedValue === null || Array.isArray(mergedValue)) return [];else return [mergedValue];\n      }\n    });\n    const selectedOptionRef = computed(() => {\n      const {\n        multiple,\n        showPath,\n        separator,\n        labelField\n      } = props;\n      if (multiple) return null;\n      const {\n        value: mergedValue\n      } = mergedValueRef;\n      if (!Array.isArray(mergedValue) && mergedValue !== null) {\n        const {\n          value: treeMate\n        } = dataTreeMateRef;\n        const tmNode = treeMate.getNode(mergedValue);\n        if (tmNode !== null) {\n          return showPath ? treeOption2SelectOptionWithPath(tmNode, treeMate.getPath(mergedValue).treeNodePath, separator, labelField) : treeOption2SelectOption(tmNode, labelField);\n        }\n      }\n      return null;\n    });\n    const selectedOptionsRef = computed(() => {\n      const {\n        multiple,\n        showPath,\n        separator\n      } = props;\n      if (!multiple) return null;\n      const {\n        value: mergedValue\n      } = mergedValueRef;\n      if (Array.isArray(mergedValue)) {\n        const res = [];\n        const {\n          value: treeMate\n        } = dataTreeMateRef;\n        const {\n          checkedKeys\n        } = treeMate.getCheckedKeys(mergedValue, {\n          checkStrategy: props.checkStrategy,\n          cascade: mergedCascadeRef.value,\n          allowNotLoaded: props.allowCheckingNotLoaded\n        });\n        const {\n          labelField\n        } = props;\n        checkedKeys.forEach(value => {\n          const tmNode = treeMate.getNode(value);\n          if (tmNode !== null) {\n            res.push(showPath ? treeOption2SelectOptionWithPath(tmNode, treeMate.getPath(value).treeNodePath, separator, labelField) : treeOption2SelectOption(tmNode, labelField));\n          }\n        });\n        return res;\n      }\n      return [];\n    });\n    const menuPaddingRef = computed(() => {\n      const {\n        self: {\n          menuPadding\n        }\n      } = themeRef.value;\n      return menuPadding;\n    });\n    function focusSelection() {\n      var _a;\n      (_a = triggerInstRef.value) === null || _a === void 0 ? void 0 : _a.focus();\n    }\n    function focusSelectionInput() {\n      var _a;\n      (_a = triggerInstRef.value) === null || _a === void 0 ? void 0 : _a.focusInput();\n    }\n    function doUpdateShow(value) {\n      const {\n        onUpdateShow,\n        'onUpdate:show': _onUpdateShow\n      } = props;\n      if (onUpdateShow) call(onUpdateShow, value);\n      if (_onUpdateShow) call(_onUpdateShow, value);\n      uncontrolledShowRef.value = value;\n    }\n    function doUpdateValue(value, option, meta) {\n      const {\n        onUpdateValue,\n        'onUpdate:value': _onUpdateValue\n      } = props;\n      if (onUpdateValue) {\n        call(onUpdateValue, value, option, meta);\n      }\n      if (_onUpdateValue) {\n        call(_onUpdateValue, value, option, meta);\n      }\n      uncontrolledValueRef.value = value;\n      nTriggerFormInput();\n      nTriggerFormChange();\n    }\n    function doUpdateIndeterminateKeys(value, option) {\n      const {\n        onUpdateIndeterminateKeys,\n        'onUpdate:indeterminateKeys': _onUpdateIndeterminateKeys\n      } = props;\n      if (onUpdateIndeterminateKeys) {\n        call(onUpdateIndeterminateKeys, value, option);\n      }\n      if (_onUpdateIndeterminateKeys) {\n        call(_onUpdateIndeterminateKeys, value, option);\n      }\n    }\n    function doUpdateExpandedKeys(keys, option, meta) {\n      const {\n        onUpdateExpandedKeys,\n        'onUpdate:expandedKeys': _onUpdateExpandedKeys\n      } = props;\n      if (onUpdateExpandedKeys) {\n        call(onUpdateExpandedKeys, keys, option, meta);\n      }\n      if (_onUpdateExpandedKeys) {\n        call(_onUpdateExpandedKeys, keys, option, meta);\n      }\n      uncontrolledExpandedKeysRef.value = keys;\n    }\n    function doFocus(e) {\n      const {\n        onFocus\n      } = props;\n      if (onFocus) onFocus(e);\n      nTriggerFormFocus();\n    }\n    function doBlur(e) {\n      closeMenu();\n      const {\n        onBlur\n      } = props;\n      if (onBlur) onBlur(e);\n      nTriggerFormBlur();\n    }\n    function closeMenu() {\n      doUpdateShow(false);\n    }\n    function openMenu() {\n      if (!mergedDisabledRef.value) {\n        patternRef.value = '';\n        doUpdateShow(true);\n        if (props.filterable) {\n          focusSelectionInput();\n        }\n      }\n    }\n    function handleMenuLeave() {\n      patternRef.value = '';\n    }\n    function handleMenuClickoutside(e) {\n      var _a;\n      if (mergedShowRef.value) {\n        if (!((_a = triggerInstRef.value) === null || _a === void 0 ? void 0 : _a.$el.contains(getPreciseEventTarget(e)))) {\n          // outside select, don't need to return focus\n          closeMenu();\n        }\n      }\n    }\n    function handleTriggerClick() {\n      if (mergedDisabledRef.value) return;\n      if (!mergedShowRef.value) {\n        openMenu();\n      } else {\n        if (!props.filterable) {\n          // already focused, don't need to return focus\n          closeMenu();\n        }\n      }\n    }\n    function getOptionsByKeys(keys) {\n      const {\n        value: {\n          getNode\n        }\n      } = dataTreeMateRef;\n      return keys.map(key => {\n        var _a;\n        return ((_a = getNode(key)) === null || _a === void 0 ? void 0 : _a.rawNode) || null;\n      });\n    }\n    function handleUpdateCheckedKeys(keys, _, meta) {\n      const options = getOptionsByKeys(keys);\n      const action = meta.action === 'check' ? 'select' : 'unselect';\n      const node = meta.node;\n      if (props.multiple) {\n        doUpdateValue(keys, options, {\n          node,\n          action\n        });\n        if (props.filterable) {\n          focusSelectionInput();\n          if (props.clearFilterAfterSelect) patternRef.value = '';\n        }\n      } else {\n        keys.length ? doUpdateValue(keys[0], options[0] || null, {\n          node,\n          action\n        }) : doUpdateValue(null, null, {\n          node,\n          action\n        });\n        closeMenu();\n        // Currently it is not necessary. However if there is an action slot,\n        // it will be useful. So just leave it here.\n        focusSelection();\n      }\n    }\n    function handleUpdateIndeterminateKeys(keys) {\n      if (props.checkable) {\n        doUpdateIndeterminateKeys(keys, getOptionsByKeys(keys));\n      }\n    }\n    function handleTriggerFocus(e) {\n      var _a;\n      if ((_a = menuElRef.value) === null || _a === void 0 ? void 0 : _a.contains(e.relatedTarget)) return;\n      focusedRef.value = true;\n      doFocus(e);\n    }\n    function handleTriggerBlur(e) {\n      var _a;\n      if ((_a = menuElRef.value) === null || _a === void 0 ? void 0 : _a.contains(e.relatedTarget)) return;\n      focusedRef.value = false;\n      doBlur(e);\n    }\n    function handleMenuFocusin(e) {\n      var _a, _b, _c;\n      if (((_a = menuElRef.value) === null || _a === void 0 ? void 0 : _a.contains(e.relatedTarget)) || ((_c = (_b = triggerInstRef.value) === null || _b === void 0 ? void 0 : _b.$el) === null || _c === void 0 ? void 0 : _c.contains(e.relatedTarget))) {\n        return;\n      }\n      focusedRef.value = true;\n      doFocus(e);\n    }\n    function handleMenuFocusout(e) {\n      var _a, _b, _c;\n      if (((_a = menuElRef.value) === null || _a === void 0 ? void 0 : _a.contains(e.relatedTarget)) || ((_c = (_b = triggerInstRef.value) === null || _b === void 0 ? void 0 : _b.$el) === null || _c === void 0 ? void 0 : _c.contains(e.relatedTarget))) {\n        return;\n      }\n      focusedRef.value = false;\n      doBlur(e);\n    }\n    function handleClear(e) {\n      e.stopPropagation();\n      const {\n        multiple\n      } = props;\n      if (!multiple && props.filterable) {\n        closeMenu();\n      }\n      if (multiple) {\n        doUpdateValue([], [], {\n          node: null,\n          action: 'clear'\n        });\n      } else {\n        doUpdateValue(null, null, {\n          node: null,\n          action: 'clear'\n        });\n      }\n    }\n    function handleDeleteOption(option) {\n      // only work for multiple mode\n      const {\n        value: mergedValue\n      } = mergedValueRef;\n      if (Array.isArray(mergedValue)) {\n        const {\n          value: treeMate\n        } = dataTreeMateRef;\n        // all visible checked keys\n        const {\n          checkedKeys: checkedKeysValue\n        } = treeMate.getCheckedKeys(mergedValue, {\n          cascade: mergedCascadeRef.value,\n          allowNotLoaded: props.allowCheckingNotLoaded\n        });\n        const index = checkedKeysValue.findIndex(key => key === option.value);\n        if (~index) {\n          const checkedKeyToBeRemoved = checkedKeysValue[index];\n          const checkOptionToBeRemoved = getOptionsByKeys([checkedKeyToBeRemoved])[0];\n          if (props.checkable) {\n            const {\n              checkedKeys\n            } = treeMate.uncheck(option.value, checkedKeysValue, {\n              checkStrategy: props.checkStrategy,\n              cascade: mergedCascadeRef.value,\n              allowNotLoaded: props.allowCheckingNotLoaded\n            });\n            doUpdateValue(checkedKeys, getOptionsByKeys(checkedKeys), {\n              node: checkOptionToBeRemoved,\n              action: 'delete'\n            });\n          } else {\n            const nextValue = Array.from(checkedKeysValue);\n            nextValue.splice(index, 1);\n            doUpdateValue(nextValue, getOptionsByKeys(nextValue), {\n              node: checkOptionToBeRemoved,\n              action: 'delete'\n            });\n          }\n        }\n      }\n    }\n    function handlePatternInput(e) {\n      const {\n        value\n      } = e.target;\n      patternRef.value = value;\n    }\n    function treeHandleKeydown(e) {\n      const {\n        value: treeInst\n      } = treeInstRef;\n      if (treeInst) {\n        treeInst.handleKeydown(e);\n      }\n    }\n    function handleKeydown(e) {\n      if (e.key === 'Enter') {\n        if (mergedShowRef.value) {\n          treeHandleKeydown(e);\n          if (!props.multiple) {\n            closeMenu();\n            focusSelection();\n          }\n        } else {\n          openMenu();\n        }\n        e.preventDefault();\n      } else if (e.key === 'Escape') {\n        if (mergedShowRef.value) {\n          markEventEffectPerformed(e);\n          closeMenu();\n          focusSelection();\n        }\n      } else {\n        if (mergedShowRef.value) {\n          treeHandleKeydown(e);\n        } else if (e.key === 'ArrowDown') {\n          openMenu();\n        }\n      }\n    }\n    function handleTabOut() {\n      closeMenu();\n      focusSelection();\n    }\n    function handleMenuMousedown(e) {\n      // If there's an action slot later, we need to check if mousedown happens\n      // in action panel\n      if (!happensIn(e, 'action')) e.preventDefault();\n    }\n    const selectionRenderTagRef = computed(() => {\n      const {\n        renderTag\n      } = props;\n      if (!renderTag) return undefined;\n      return function selectionRenderTag({\n        option,\n        handleClose\n      }) {\n        const {\n          value\n        } = option;\n        if (value !== undefined) {\n          const treeOption = dataTreeMateRef.value.getNode(value);\n          if (treeOption) {\n            return renderTag({\n              option: treeOption.rawNode,\n              handleClose\n            });\n          }\n        }\n        return value;\n      };\n    });\n    provide(treeSelectInjectionKey, {\n      pendingNodeKeyRef,\n      dataTreeMate: dataTreeMateRef\n    });\n    function handleTriggerOrMenuResize() {\n      var _a;\n      if (!mergedShowRef.value) return;\n      (_a = followerInstRef.value) === null || _a === void 0 ? void 0 : _a.syncPosition();\n    }\n    useOnResize(menuElRef, handleTriggerOrMenuResize);\n    const mergedCheckStrategyRef = useMergedCheckStrategy(props);\n    const exposedCheckedStatusRef = computed(() => {\n      if (props.checkable) {\n        const mergedValue = mergedValueRef.value;\n        if (props.multiple && Array.isArray(mergedValue)) {\n          return dataTreeMateRef.value.getCheckedKeys(mergedValue, {\n            cascade: props.cascade,\n            checkStrategy: mergedCheckStrategyRef.value,\n            allowNotLoaded: props.allowCheckingNotLoaded\n          });\n        } else {\n          return {\n            checkedKeys: Array.isArray(mergedValue) || mergedValue === null ? [] : [mergedValue],\n            indeterminateKeys: []\n          };\n        }\n      }\n      return {\n        checkedKeys: [],\n        indeterminateKeys: []\n      };\n    });\n    const exposedMethods = {\n      getCheckedData: () => {\n        const {\n          checkedKeys\n        } = exposedCheckedStatusRef.value;\n        return {\n          keys: checkedKeys,\n          options: getOptionsByKeys(checkedKeys)\n        };\n      },\n      getIndeterminateData: () => {\n        const {\n          indeterminateKeys\n        } = exposedCheckedStatusRef.value;\n        return {\n          keys: indeterminateKeys,\n          options: getOptionsByKeys(indeterminateKeys)\n        };\n      },\n      focus: () => {\n        var _a;\n        return (_a = triggerInstRef.value) === null || _a === void 0 ? void 0 : _a.focus();\n      },\n      focusInput: () => {\n        var _a;\n        return (_a = triggerInstRef.value) === null || _a === void 0 ? void 0 : _a.focusInput();\n      },\n      blur: () => {\n        var _a;\n        return (_a = triggerInstRef.value) === null || _a === void 0 ? void 0 : _a.blur();\n      },\n      blurInput: () => {\n        var _a;\n        return (_a = triggerInstRef.value) === null || _a === void 0 ? void 0 : _a.blurInput();\n      }\n    };\n    const themeRef = useTheme('TreeSelect', '-tree-select', style, treeSelectLight, props, mergedClsPrefixRef);\n    const cssVarsRef = computed(() => {\n      const {\n        common: {\n          cubicBezierEaseInOut\n        },\n        self: {\n          menuBoxShadow,\n          menuBorderRadius,\n          menuColor,\n          menuHeight,\n          actionPadding,\n          actionDividerColor,\n          actionTextColor\n        }\n      } = themeRef.value;\n      return {\n        '--n-menu-box-shadow': menuBoxShadow,\n        '--n-menu-border-radius': menuBorderRadius,\n        '--n-menu-color': menuColor,\n        '--n-menu-height': menuHeight,\n        '--n-bezier': cubicBezierEaseInOut,\n        '--n-action-padding': actionPadding,\n        '--n-action-text-color': actionTextColor,\n        '--n-action-divider-color': actionDividerColor\n      };\n    });\n    const themeClassHandle = inlineThemeDisabled ? useThemeClass('tree-select', undefined, cssVarsRef, props) : undefined;\n    return Object.assign(Object.assign({}, exposedMethods), {\n      menuElRef,\n      mergedStatus: mergedStatusRef,\n      triggerInstRef,\n      followerInstRef,\n      treeInstRef,\n      mergedClsPrefix: mergedClsPrefixRef,\n      mergedValue: mergedValueRef,\n      mergedShow: mergedShowRef,\n      namespace: namespaceRef,\n      adjustedTo: useAdjustedTo(props),\n      isMounted: useIsMounted(),\n      focused: focusedRef,\n      menuPadding: menuPaddingRef,\n      mergedPlaceholder: mergedPlaceholderRef,\n      mergedExpandedKeys: mergedExpandedKeysRef,\n      treeSelectedKeys: treeSelectedKeysRef,\n      treeCheckedKeys: treeCheckedKeysRef,\n      mergedSize: mergedSizeRef,\n      mergedDisabled: mergedDisabledRef,\n      selectedOption: selectedOptionRef,\n      selectedOptions: selectedOptionsRef,\n      pattern: patternRef,\n      pendingNodeKey: pendingNodeKeyRef,\n      mergedCascade: mergedCascadeRef,\n      mergedFilter: mergedFilterRef,\n      selectionRenderTag: selectionRenderTagRef,\n      handleTriggerOrMenuResize,\n      doUpdateExpandedKeys,\n      handleMenuLeave,\n      handleTriggerClick,\n      handleMenuClickoutside,\n      handleUpdateCheckedKeys,\n      handleUpdateIndeterminateKeys,\n      handleTriggerFocus,\n      handleTriggerBlur,\n      handleMenuFocusin,\n      handleMenuFocusout,\n      handleClear,\n      handleDeleteOption,\n      handlePatternInput,\n      handleKeydown,\n      handleTabOut,\n      handleMenuMousedown,\n      mergedTheme: themeRef,\n      cssVars: inlineThemeDisabled ? undefined : cssVarsRef,\n      themeClass: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.themeClass,\n      onRender: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.onRender\n    });\n  },\n  render() {\n    const {\n      mergedTheme,\n      mergedClsPrefix,\n      $slots\n    } = this;\n    return h(\"div\", {\n      class: `${mergedClsPrefix}-tree-select`\n    }, h(VBinder, null, {\n      default: () => [h(VTarget, null, {\n        default: () => h(NInternalSelection, {\n          ref: \"triggerInstRef\",\n          onResize: this.handleTriggerOrMenuResize,\n          status: this.mergedStatus,\n          focused: this.focused,\n          clsPrefix: mergedClsPrefix,\n          theme: mergedTheme.peers.InternalSelection,\n          themeOverrides: mergedTheme.peerOverrides.InternalSelection,\n          renderTag: this.selectionRenderTag,\n          selectedOption: this.selectedOption,\n          selectedOptions: this.selectedOptions,\n          size: this.mergedSize,\n          bordered: this.bordered,\n          placeholder: this.mergedPlaceholder,\n          disabled: this.mergedDisabled,\n          active: this.mergedShow,\n          loading: this.loading,\n          multiple: this.multiple,\n          maxTagCount: this.maxTagCount,\n          showArrow: true,\n          filterable: this.filterable,\n          clearable: this.clearable,\n          pattern: this.pattern,\n          onPatternInput: this.handlePatternInput,\n          onClear: this.handleClear,\n          onClick: this.handleTriggerClick,\n          onFocus: this.handleTriggerFocus,\n          onBlur: this.handleTriggerBlur,\n          onDeleteOption: this.handleDeleteOption,\n          onKeydown: this.handleKeydown\n        }, {\n          arrow: () => {\n            var _a, _b;\n            return [(_b = (_a = this.$slots).arrow) === null || _b === void 0 ? void 0 : _b.call(_a)];\n          }\n        })\n      }), h(VFollower, {\n        ref: \"followerInstRef\",\n        show: this.mergedShow,\n        placement: this.placement,\n        to: this.adjustedTo,\n        teleportDisabled: this.adjustedTo === useAdjustedTo.tdkey,\n        containerClass: this.namespace,\n        width: this.consistentMenuWidth ? 'target' : undefined,\n        minWidth: \"target\"\n      }, {\n        default: () => h(Transition, {\n          name: \"fade-in-scale-up-transition\",\n          appear: this.isMounted,\n          onLeave: this.handleMenuLeave\n        }, {\n          default: () => {\n            var _a;\n            if (!this.mergedShow) return null;\n            const {\n              mergedClsPrefix,\n              checkable,\n              multiple,\n              menuProps,\n              options\n            } = this;\n            (_a = this.onRender) === null || _a === void 0 ? void 0 : _a.call(this);\n            return withDirectives(h(\"div\", Object.assign({}, menuProps, {\n              class: [`${mergedClsPrefix}-tree-select-menu`, menuProps === null || menuProps === void 0 ? void 0 : menuProps.class, this.themeClass],\n              ref: \"menuElRef\",\n              style: [(menuProps === null || menuProps === void 0 ? void 0 : menuProps.style) || '', this.cssVars],\n              tabindex: 0,\n              onMousedown: this.handleMenuMousedown,\n              onKeydown: this.handleKeydown,\n              onFocusin: this.handleMenuFocusin,\n              onFocusout: this.handleMenuFocusout\n            }), h(NTree, {\n              ref: \"treeInstRef\",\n              blockLine: true,\n              allowCheckingNotLoaded: this.allowCheckingNotLoaded,\n              showIrrelevantNodes: false,\n              animated: false,\n              pattern: this.pattern,\n              filter: this.mergedFilter,\n              data: options,\n              cancelable: multiple,\n              labelField: this.labelField,\n              keyField: this.keyField,\n              disabledField: this.disabledField,\n              childrenField: this.childrenField,\n              theme: mergedTheme.peers.Tree,\n              themeOverrides: mergedTheme.peerOverrides.Tree,\n              defaultExpandAll: this.defaultExpandAll,\n              defaultExpandedKeys: this.defaultExpandedKeys,\n              expandedKeys: this.mergedExpandedKeys,\n              checkedKeys: this.treeCheckedKeys,\n              selectedKeys: this.treeSelectedKeys,\n              checkable: checkable,\n              checkStrategy: this.checkStrategy,\n              cascade: this.mergedCascade,\n              leafOnly: this.leafOnly,\n              multiple: this.multiple,\n              renderLabel: this.renderLabel,\n              renderPrefix: this.renderPrefix,\n              renderSuffix: this.renderSuffix,\n              renderSwitcherIcon: this.renderSwitcherIcon,\n              nodeProps: this.nodeProps,\n              watchProps: this.watchProps,\n              virtualScroll: this.consistentMenuWidth && this.virtualScroll,\n              internalTreeSelect: true,\n              internalUnifySelectCheck: true,\n              internalScrollable: true,\n              internalScrollablePadding: this.menuPadding,\n              internalFocusable: false,\n              internalCheckboxFocusable: false,\n              internalRenderEmpty: () => h(\"div\", {\n                class: `${mergedClsPrefix}-tree-select-menu__empty`\n              }, resolveSlot($slots.empty, () => [h(NEmpty, {\n                theme: mergedTheme.peers.Empty,\n                themeOverrides: mergedTheme.peerOverrides.Empty\n              })])),\n              onLoad: this.onLoad,\n              onUpdateCheckedKeys: this.handleUpdateCheckedKeys,\n              onUpdateIndeterminateKeys: this.handleUpdateIndeterminateKeys,\n              onUpdateExpandedKeys: this.doUpdateExpandedKeys\n            }), resolveWrappedSlot($slots.action, children => {\n              return children ? h(\"div\", {\n                class: `${mergedClsPrefix}-tree-select-menu__action`,\n                \"data-action\": true\n              }, children) : null;\n            }), h(NBaseFocusDetector, {\n              onFocus: this.handleTabOut\n            })), [[clickoutside, this.handleMenuClickoutside, undefined, {\n              capture: true\n            }]]);\n          }\n        })\n      })]\n    }));\n  }\n});","map":{"version":3,"names":["h","defineComponent","ref","toRef","Transition","withDirectives","computed","provide","watchEffect","VBinder","VFollower","VTarget","useIsMounted","useMergedState","clickoutside","createTreeMate","getPreciseEventTarget","happensIn","createTreeMateOptions","treeSharedProps","NInternalSelection","NBaseFocusDetector","NTree","NEmpty","useConfig","useFormItem","useLocale","useTheme","useThemeClass","call","markEventEffectPerformed","resolveSlot","resolveWrappedSlot","useAdjustedTo","useOnResize","warnOnce","treeSelectLight","treeSelectInjectionKey","treeOption2SelectOption","treeOption2SelectOptionWithPath","style","useMergedCheckStrategy","treeSelectProps","Object","assign","props","bordered","type","Boolean","default","cascade","checkable","clearable","clearFilterAfterSelect","consistentMenuWidth","defaultShow","defaultValue","String","Number","Array","disabled","undefined","filterable","checkStrategy","loading","maxTagCount","multiple","showPath","separator","options","placeholder","placement","show","size","value","to","propTo","menuProps","virtualScroll","status","renderTag","Function","renderLabel","renderPrefix","renderSuffix","nodeProps","watchProps","onBlur","onFocus","onLoad","onUpdateShow","onUpdateValue","leafOnly","name","setup","process","env","NODE_ENV","followerInstRef","triggerInstRef","treeInstRef","menuElRef","mergedClsPrefixRef","namespaceRef","inlineThemeDisabled","localeRef","mergedSizeRef","mergedDisabledRef","mergedStatusRef","nTriggerFormBlur","nTriggerFormChange","nTriggerFormFocus","nTriggerFormInput","uncontrolledValueRef","controlledValueRef","mergedValueRef","uncontrolledShowRef","controlledShowRef","mergedShowRef","patternRef","mergedFilterRef","filter","labelField","pattern","node","length","toLowerCase","includes","dataTreeMateRef","keyField","childrenField","disabledField","initMergedValue","pendingNodeKeyRef","isArray","mergedCascadeRef","uncontrolledExpandedKeysRef","defaultExpandAll","defaultExpandedKeys","expandedKeys","controlledExpandedKeysRef","mergedExpandedKeysRef","focusedRef","mergedPlaceholderRef","treeSelectedKeysRef","treeCheckedKeysRef","mergedValue","selectedOptionRef","treeMate","tmNode","getNode","getPath","treeNodePath","selectedOptionsRef","res","checkedKeys","getCheckedKeys","allowNotLoaded","allowCheckingNotLoaded","forEach","push","menuPaddingRef","self","menuPadding","themeRef","focusSelection","_a","focus","focusSelectionInput","focusInput","doUpdateShow","_onUpdateShow","doUpdateValue","option","meta","_onUpdateValue","doUpdateIndeterminateKeys","onUpdateIndeterminateKeys","_onUpdateIndeterminateKeys","doUpdateExpandedKeys","keys","onUpdateExpandedKeys","_onUpdateExpandedKeys","doFocus","e","doBlur","closeMenu","openMenu","handleMenuLeave","handleMenuClickoutside","$el","contains","handleTriggerClick","getOptionsByKeys","map","key","rawNode","handleUpdateCheckedKeys","_","action","handleUpdateIndeterminateKeys","handleTriggerFocus","relatedTarget","handleTriggerBlur","handleMenuFocusin","_b","_c","handleMenuFocusout","handleClear","stopPropagation","handleDeleteOption","checkedKeysValue","index","findIndex","checkedKeyToBeRemoved","checkOptionToBeRemoved","uncheck","nextValue","from","splice","handlePatternInput","target","treeHandleKeydown","treeInst","handleKeydown","preventDefault","handleTabOut","handleMenuMousedown","selectionRenderTagRef","selectionRenderTag","handleClose","treeOption","dataTreeMate","handleTriggerOrMenuResize","syncPosition","mergedCheckStrategyRef","exposedCheckedStatusRef","indeterminateKeys","exposedMethods","getCheckedData","getIndeterminateData","blur","blurInput","cssVarsRef","common","cubicBezierEaseInOut","menuBoxShadow","menuBorderRadius","menuColor","menuHeight","actionPadding","actionDividerColor","actionTextColor","themeClassHandle","mergedStatus","mergedClsPrefix","mergedShow","namespace","adjustedTo","isMounted","focused","mergedPlaceholder","mergedExpandedKeys","treeSelectedKeys","treeCheckedKeys","mergedSize","mergedDisabled","selectedOption","selectedOptions","pendingNodeKey","mergedCascade","mergedFilter","mergedTheme","cssVars","themeClass","onRender","render","$slots","class","onResize","clsPrefix","theme","peers","InternalSelection","themeOverrides","peerOverrides","active","showArrow","onPatternInput","onClear","onClick","onDeleteOption","onKeydown","arrow","teleportDisabled","tdkey","containerClass","width","minWidth","appear","onLeave","tabindex","onMousedown","onFocusin","onFocusout","blockLine","showIrrelevantNodes","animated","data","cancelable","Tree","selectedKeys","renderSwitcherIcon","internalTreeSelect","internalUnifySelectCheck","internalScrollable","internalScrollablePadding","internalFocusable","internalCheckboxFocusable","internalRenderEmpty","empty","Empty","onUpdateCheckedKeys","children","capture"],"sources":["/home/whw/Vue/whwtest.github.io/node_modules/naive-ui/es/tree-select/src/TreeSelect.js"],"sourcesContent":["import { h, defineComponent, ref, toRef, Transition, withDirectives, computed, provide, watchEffect } from 'vue';\nimport { VBinder, VFollower, VTarget } from 'vueuc';\nimport { useIsMounted, useMergedState } from 'vooks';\nimport { clickoutside } from 'vdirs';\nimport { createTreeMate } from 'treemate';\nimport { getPreciseEventTarget, happensIn } from 'seemly';\nimport { createTreeMateOptions, treeSharedProps } from '../../tree/src/Tree';\nimport { NInternalSelection, NBaseFocusDetector } from '../../_internal';\nimport { NTree } from '../../tree';\nimport { NEmpty } from '../../empty';\nimport { useConfig, useFormItem, useLocale, useTheme, useThemeClass } from '../../_mixins';\nimport { call, markEventEffectPerformed, resolveSlot, resolveWrappedSlot, useAdjustedTo, useOnResize, warnOnce } from '../../_utils';\nimport { treeSelectLight } from '../styles';\nimport { treeSelectInjectionKey } from './interface';\nimport { treeOption2SelectOption, treeOption2SelectOptionWithPath } from './utils';\nimport style from './styles/index.cssr';\nimport { useMergedCheckStrategy } from '../../tree/src/utils';\nexport const treeSelectProps = Object.assign(Object.assign(Object.assign(Object.assign({}, useTheme.props), { bordered: {\n        type: Boolean,\n        default: true\n    }, cascade: Boolean, checkable: Boolean, clearable: Boolean, clearFilterAfterSelect: {\n        type: Boolean,\n        default: true\n    }, consistentMenuWidth: {\n        type: Boolean,\n        default: true\n    }, defaultShow: Boolean, defaultValue: {\n        type: [String, Number, Array],\n        default: null\n    }, disabled: {\n        type: Boolean,\n        default: undefined\n    }, filterable: Boolean, checkStrategy: {\n        type: String,\n        default: 'all'\n    }, loading: Boolean, maxTagCount: [String, Number], multiple: Boolean, showPath: Boolean, separator: {\n        type: String,\n        default: ' / '\n    }, options: {\n        type: Array,\n        default: () => []\n    }, placeholder: String, placement: {\n        type: String,\n        default: 'bottom-start'\n    }, show: {\n        type: Boolean,\n        default: undefined\n    }, size: String, value: [String, Number, Array], to: useAdjustedTo.propTo, menuProps: Object, virtualScroll: {\n        type: Boolean,\n        default: true\n    }, status: String, renderTag: Function }), treeSharedProps), { renderLabel: Function, renderPrefix: Function, renderSuffix: Function, nodeProps: Function, watchProps: Array, onBlur: Function, onFocus: Function, onLoad: Function, onUpdateShow: [Function, Array], onUpdateValue: [Function, Array], 'onUpdate:value': [Function, Array], 'onUpdate:show': [Function, Array], \n    /**\n     * @deprecated\n     */\n    leafOnly: Boolean });\nexport default defineComponent({\n    name: 'TreeSelect',\n    props: treeSelectProps,\n    setup(props) {\n        if (process.env.NODE_ENV !== 'production') {\n            watchEffect(() => {\n                if (props.leafOnly) {\n                    warnOnce('tree-select', '`leaf-only` is deprecated, please use `check-strategy=\"child\"` instead.');\n                }\n            });\n        }\n        const followerInstRef = ref(null);\n        const triggerInstRef = ref(null);\n        const treeInstRef = ref(null);\n        const menuElRef = ref(null);\n        const { mergedClsPrefixRef, namespaceRef, inlineThemeDisabled } = useConfig(props);\n        const { localeRef } = useLocale('Select');\n        const { mergedSizeRef, mergedDisabledRef, mergedStatusRef, nTriggerFormBlur, nTriggerFormChange, nTriggerFormFocus, nTriggerFormInput } = useFormItem(props);\n        const uncontrolledValueRef = ref(props.defaultValue);\n        const controlledValueRef = toRef(props, 'value');\n        const mergedValueRef = useMergedState(controlledValueRef, uncontrolledValueRef);\n        const uncontrolledShowRef = ref(props.defaultShow);\n        const controlledShowRef = toRef(props, 'show');\n        const mergedShowRef = useMergedState(controlledShowRef, uncontrolledShowRef);\n        const patternRef = ref('');\n        const mergedFilterRef = computed(() => {\n            const { filter } = props;\n            if (filter)\n                return filter;\n            const { labelField } = props;\n            return (pattern, node) => {\n                if (!pattern.length)\n                    return true;\n                return node[labelField]\n                    .toLowerCase()\n                    .includes(pattern.toLowerCase());\n            };\n        });\n        // used to resolve selected options\n        const dataTreeMateRef = computed(() => createTreeMate(props.options, createTreeMateOptions(props.keyField, props.childrenField, props.disabledField, undefined)));\n        const { value: initMergedValue } = mergedValueRef;\n        const pendingNodeKeyRef = ref(props.checkable\n            ? null\n            : Array.isArray(initMergedValue) && initMergedValue.length\n                ? initMergedValue[initMergedValue.length - 1]\n                : null);\n        const mergedCascadeRef = computed(() => {\n            return props.multiple && props.cascade && props.checkable;\n        });\n        // The same logic as tree, now it's not that complex so I don't extract a\n        // function to reuse it.\n        const uncontrolledExpandedKeysRef = ref(props.defaultExpandAll\n            ? undefined // leave it, n-tree will handle it\n            : props.defaultExpandedKeys || props.expandedKeys);\n        const controlledExpandedKeysRef = toRef(props, 'expandedKeys');\n        const mergedExpandedKeysRef = useMergedState(controlledExpandedKeysRef, uncontrolledExpandedKeysRef);\n        const focusedRef = ref(false);\n        const mergedPlaceholderRef = computed(() => {\n            const { placeholder } = props;\n            if (placeholder !== undefined)\n                return placeholder;\n            return localeRef.value.placeholder;\n        });\n        const treeSelectedKeysRef = computed(() => {\n            if (props.checkable)\n                return [];\n            return treeCheckedKeysRef.value;\n        });\n        const treeCheckedKeysRef = computed(() => {\n            const { value: mergedValue } = mergedValueRef;\n            if (props.multiple) {\n                if (Array.isArray(mergedValue))\n                    return mergedValue;\n                else\n                    return [];\n            }\n            else {\n                if (mergedValue === null || Array.isArray(mergedValue))\n                    return [];\n                else\n                    return [mergedValue];\n            }\n        });\n        const selectedOptionRef = computed(() => {\n            const { multiple, showPath, separator, labelField } = props;\n            if (multiple)\n                return null;\n            const { value: mergedValue } = mergedValueRef;\n            if (!Array.isArray(mergedValue) && mergedValue !== null) {\n                const { value: treeMate } = dataTreeMateRef;\n                const tmNode = treeMate.getNode(mergedValue);\n                if (tmNode !== null) {\n                    return showPath\n                        ? treeOption2SelectOptionWithPath(tmNode, treeMate.getPath(mergedValue).treeNodePath, separator, labelField)\n                        : treeOption2SelectOption(tmNode, labelField);\n                }\n            }\n            return null;\n        });\n        const selectedOptionsRef = computed(() => {\n            const { multiple, showPath, separator } = props;\n            if (!multiple)\n                return null;\n            const { value: mergedValue } = mergedValueRef;\n            if (Array.isArray(mergedValue)) {\n                const res = [];\n                const { value: treeMate } = dataTreeMateRef;\n                const { checkedKeys } = treeMate.getCheckedKeys(mergedValue, {\n                    checkStrategy: props.checkStrategy,\n                    cascade: mergedCascadeRef.value,\n                    allowNotLoaded: props.allowCheckingNotLoaded\n                });\n                const { labelField } = props;\n                checkedKeys.forEach((value) => {\n                    const tmNode = treeMate.getNode(value);\n                    if (tmNode !== null) {\n                        res.push(showPath\n                            ? treeOption2SelectOptionWithPath(tmNode, treeMate.getPath(value).treeNodePath, separator, labelField)\n                            : treeOption2SelectOption(tmNode, labelField));\n                    }\n                });\n                return res;\n            }\n            return [];\n        });\n        const menuPaddingRef = computed(() => {\n            const { self: { menuPadding } } = themeRef.value;\n            return menuPadding;\n        });\n        function focusSelection() {\n            var _a;\n            (_a = triggerInstRef.value) === null || _a === void 0 ? void 0 : _a.focus();\n        }\n        function focusSelectionInput() {\n            var _a;\n            (_a = triggerInstRef.value) === null || _a === void 0 ? void 0 : _a.focusInput();\n        }\n        function doUpdateShow(value) {\n            const { onUpdateShow, 'onUpdate:show': _onUpdateShow } = props;\n            if (onUpdateShow)\n                call(onUpdateShow, value);\n            if (_onUpdateShow)\n                call(_onUpdateShow, value);\n            uncontrolledShowRef.value = value;\n        }\n        function doUpdateValue(value, option, meta) {\n            const { onUpdateValue, 'onUpdate:value': _onUpdateValue } = props;\n            if (onUpdateValue) {\n                call(onUpdateValue, value, option, meta);\n            }\n            if (_onUpdateValue) {\n                call(_onUpdateValue, value, option, meta);\n            }\n            uncontrolledValueRef.value = value;\n            nTriggerFormInput();\n            nTriggerFormChange();\n        }\n        function doUpdateIndeterminateKeys(value, option) {\n            const { onUpdateIndeterminateKeys, 'onUpdate:indeterminateKeys': _onUpdateIndeterminateKeys } = props;\n            if (onUpdateIndeterminateKeys) {\n                call(onUpdateIndeterminateKeys, value, option);\n            }\n            if (_onUpdateIndeterminateKeys) {\n                call(_onUpdateIndeterminateKeys, value, option);\n            }\n        }\n        function doUpdateExpandedKeys(keys, option, meta) {\n            const { onUpdateExpandedKeys, 'onUpdate:expandedKeys': _onUpdateExpandedKeys } = props;\n            if (onUpdateExpandedKeys) {\n                call(onUpdateExpandedKeys, keys, option, meta);\n            }\n            if (_onUpdateExpandedKeys) {\n                call(_onUpdateExpandedKeys, keys, option, meta);\n            }\n            uncontrolledExpandedKeysRef.value = keys;\n        }\n        function doFocus(e) {\n            const { onFocus } = props;\n            if (onFocus)\n                onFocus(e);\n            nTriggerFormFocus();\n        }\n        function doBlur(e) {\n            closeMenu();\n            const { onBlur } = props;\n            if (onBlur)\n                onBlur(e);\n            nTriggerFormBlur();\n        }\n        function closeMenu() {\n            doUpdateShow(false);\n        }\n        function openMenu() {\n            if (!mergedDisabledRef.value) {\n                patternRef.value = '';\n                doUpdateShow(true);\n                if (props.filterable) {\n                    focusSelectionInput();\n                }\n            }\n        }\n        function handleMenuLeave() {\n            patternRef.value = '';\n        }\n        function handleMenuClickoutside(e) {\n            var _a;\n            if (mergedShowRef.value) {\n                if (!((_a = triggerInstRef.value) === null || _a === void 0 ? void 0 : _a.$el.contains(getPreciseEventTarget(e)))) {\n                    // outside select, don't need to return focus\n                    closeMenu();\n                }\n            }\n        }\n        function handleTriggerClick() {\n            if (mergedDisabledRef.value)\n                return;\n            if (!mergedShowRef.value) {\n                openMenu();\n            }\n            else {\n                if (!props.filterable) {\n                    // already focused, don't need to return focus\n                    closeMenu();\n                }\n            }\n        }\n        function getOptionsByKeys(keys) {\n            const { value: { getNode } } = dataTreeMateRef;\n            return keys.map((key) => { var _a; return ((_a = getNode(key)) === null || _a === void 0 ? void 0 : _a.rawNode) || null; });\n        }\n        function handleUpdateCheckedKeys(keys, _, meta) {\n            const options = getOptionsByKeys(keys);\n            const action = meta.action === 'check' ? 'select' : 'unselect';\n            const node = meta.node;\n            if (props.multiple) {\n                doUpdateValue(keys, options, { node, action });\n                if (props.filterable) {\n                    focusSelectionInput();\n                    if (props.clearFilterAfterSelect)\n                        patternRef.value = '';\n                }\n            }\n            else {\n                keys.length\n                    ? doUpdateValue(keys[0], options[0] || null, {\n                        node,\n                        action\n                    })\n                    : doUpdateValue(null, null, { node, action });\n                closeMenu();\n                // Currently it is not necessary. However if there is an action slot,\n                // it will be useful. So just leave it here.\n                focusSelection();\n            }\n        }\n        function handleUpdateIndeterminateKeys(keys) {\n            if (props.checkable) {\n                doUpdateIndeterminateKeys(keys, getOptionsByKeys(keys));\n            }\n        }\n        function handleTriggerFocus(e) {\n            var _a;\n            if ((_a = menuElRef.value) === null || _a === void 0 ? void 0 : _a.contains(e.relatedTarget))\n                return;\n            focusedRef.value = true;\n            doFocus(e);\n        }\n        function handleTriggerBlur(e) {\n            var _a;\n            if ((_a = menuElRef.value) === null || _a === void 0 ? void 0 : _a.contains(e.relatedTarget))\n                return;\n            focusedRef.value = false;\n            doBlur(e);\n        }\n        function handleMenuFocusin(e) {\n            var _a, _b, _c;\n            if (((_a = menuElRef.value) === null || _a === void 0 ? void 0 : _a.contains(e.relatedTarget)) ||\n                ((_c = (_b = triggerInstRef.value) === null || _b === void 0 ? void 0 : _b.$el) === null || _c === void 0 ? void 0 : _c.contains(e.relatedTarget))) {\n                return;\n            }\n            focusedRef.value = true;\n            doFocus(e);\n        }\n        function handleMenuFocusout(e) {\n            var _a, _b, _c;\n            if (((_a = menuElRef.value) === null || _a === void 0 ? void 0 : _a.contains(e.relatedTarget)) ||\n                ((_c = (_b = triggerInstRef.value) === null || _b === void 0 ? void 0 : _b.$el) === null || _c === void 0 ? void 0 : _c.contains(e.relatedTarget))) {\n                return;\n            }\n            focusedRef.value = false;\n            doBlur(e);\n        }\n        function handleClear(e) {\n            e.stopPropagation();\n            const { multiple } = props;\n            if (!multiple && props.filterable) {\n                closeMenu();\n            }\n            if (multiple) {\n                doUpdateValue([], [], { node: null, action: 'clear' });\n            }\n            else {\n                doUpdateValue(null, null, { node: null, action: 'clear' });\n            }\n        }\n        function handleDeleteOption(option) {\n            // only work for multiple mode\n            const { value: mergedValue } = mergedValueRef;\n            if (Array.isArray(mergedValue)) {\n                const { value: treeMate } = dataTreeMateRef;\n                // all visible checked keys\n                const { checkedKeys: checkedKeysValue } = treeMate.getCheckedKeys(mergedValue, {\n                    cascade: mergedCascadeRef.value,\n                    allowNotLoaded: props.allowCheckingNotLoaded\n                });\n                const index = checkedKeysValue.findIndex((key) => key === option.value);\n                if (~index) {\n                    const checkedKeyToBeRemoved = checkedKeysValue[index];\n                    const checkOptionToBeRemoved = getOptionsByKeys([\n                        checkedKeyToBeRemoved\n                    ])[0];\n                    if (props.checkable) {\n                        const { checkedKeys } = treeMate.uncheck(option.value, checkedKeysValue, {\n                            checkStrategy: props.checkStrategy,\n                            cascade: mergedCascadeRef.value,\n                            allowNotLoaded: props.allowCheckingNotLoaded\n                        });\n                        doUpdateValue(checkedKeys, getOptionsByKeys(checkedKeys), {\n                            node: checkOptionToBeRemoved,\n                            action: 'delete'\n                        });\n                    }\n                    else {\n                        const nextValue = Array.from(checkedKeysValue);\n                        nextValue.splice(index, 1);\n                        doUpdateValue(nextValue, getOptionsByKeys(nextValue), {\n                            node: checkOptionToBeRemoved,\n                            action: 'delete'\n                        });\n                    }\n                }\n            }\n        }\n        function handlePatternInput(e) {\n            const { value } = e.target;\n            patternRef.value = value;\n        }\n        function treeHandleKeydown(e) {\n            const { value: treeInst } = treeInstRef;\n            if (treeInst) {\n                treeInst.handleKeydown(e);\n            }\n        }\n        function handleKeydown(e) {\n            if (e.key === 'Enter') {\n                if (mergedShowRef.value) {\n                    treeHandleKeydown(e);\n                    if (!props.multiple) {\n                        closeMenu();\n                        focusSelection();\n                    }\n                }\n                else {\n                    openMenu();\n                }\n                e.preventDefault();\n            }\n            else if (e.key === 'Escape') {\n                if (mergedShowRef.value) {\n                    markEventEffectPerformed(e);\n                    closeMenu();\n                    focusSelection();\n                }\n            }\n            else {\n                if (mergedShowRef.value) {\n                    treeHandleKeydown(e);\n                }\n                else if (e.key === 'ArrowDown') {\n                    openMenu();\n                }\n            }\n        }\n        function handleTabOut() {\n            closeMenu();\n            focusSelection();\n        }\n        function handleMenuMousedown(e) {\n            // If there's an action slot later, we need to check if mousedown happens\n            // in action panel\n            if (!happensIn(e, 'action'))\n                e.preventDefault();\n        }\n        const selectionRenderTagRef = computed(() => {\n            const { renderTag } = props;\n            if (!renderTag)\n                return undefined;\n            return function selectionRenderTag({ option, handleClose }) {\n                const { value } = option;\n                if (value !== undefined) {\n                    const treeOption = dataTreeMateRef.value.getNode(value);\n                    if (treeOption) {\n                        return renderTag({ option: treeOption.rawNode, handleClose });\n                    }\n                }\n                return value;\n            };\n        });\n        provide(treeSelectInjectionKey, {\n            pendingNodeKeyRef,\n            dataTreeMate: dataTreeMateRef\n        });\n        function handleTriggerOrMenuResize() {\n            var _a;\n            if (!mergedShowRef.value)\n                return;\n            (_a = followerInstRef.value) === null || _a === void 0 ? void 0 : _a.syncPosition();\n        }\n        useOnResize(menuElRef, handleTriggerOrMenuResize);\n        const mergedCheckStrategyRef = useMergedCheckStrategy(props);\n        const exposedCheckedStatusRef = computed(() => {\n            if (props.checkable) {\n                const mergedValue = mergedValueRef.value;\n                if (props.multiple && Array.isArray(mergedValue)) {\n                    return dataTreeMateRef.value.getCheckedKeys(mergedValue, {\n                        cascade: props.cascade,\n                        checkStrategy: mergedCheckStrategyRef.value,\n                        allowNotLoaded: props.allowCheckingNotLoaded\n                    });\n                }\n                else {\n                    return {\n                        checkedKeys: Array.isArray(mergedValue) || mergedValue === null\n                            ? []\n                            : [mergedValue],\n                        indeterminateKeys: []\n                    };\n                }\n            }\n            return {\n                checkedKeys: [],\n                indeterminateKeys: []\n            };\n        });\n        const exposedMethods = {\n            getCheckedData: () => {\n                const { checkedKeys } = exposedCheckedStatusRef.value;\n                return { keys: checkedKeys, options: getOptionsByKeys(checkedKeys) };\n            },\n            getIndeterminateData: () => {\n                const { indeterminateKeys } = exposedCheckedStatusRef.value;\n                return {\n                    keys: indeterminateKeys,\n                    options: getOptionsByKeys(indeterminateKeys)\n                };\n            },\n            focus: () => { var _a; return (_a = triggerInstRef.value) === null || _a === void 0 ? void 0 : _a.focus(); },\n            focusInput: () => { var _a; return (_a = triggerInstRef.value) === null || _a === void 0 ? void 0 : _a.focusInput(); },\n            blur: () => { var _a; return (_a = triggerInstRef.value) === null || _a === void 0 ? void 0 : _a.blur(); },\n            blurInput: () => { var _a; return (_a = triggerInstRef.value) === null || _a === void 0 ? void 0 : _a.blurInput(); }\n        };\n        const themeRef = useTheme('TreeSelect', '-tree-select', style, treeSelectLight, props, mergedClsPrefixRef);\n        const cssVarsRef = computed(() => {\n            const { common: { cubicBezierEaseInOut }, self: { menuBoxShadow, menuBorderRadius, menuColor, menuHeight, actionPadding, actionDividerColor, actionTextColor } } = themeRef.value;\n            return {\n                '--n-menu-box-shadow': menuBoxShadow,\n                '--n-menu-border-radius': menuBorderRadius,\n                '--n-menu-color': menuColor,\n                '--n-menu-height': menuHeight,\n                '--n-bezier': cubicBezierEaseInOut,\n                '--n-action-padding': actionPadding,\n                '--n-action-text-color': actionTextColor,\n                '--n-action-divider-color': actionDividerColor\n            };\n        });\n        const themeClassHandle = inlineThemeDisabled\n            ? useThemeClass('tree-select', undefined, cssVarsRef, props)\n            : undefined;\n        return Object.assign(Object.assign({}, exposedMethods), { menuElRef, mergedStatus: mergedStatusRef, triggerInstRef,\n            followerInstRef,\n            treeInstRef, mergedClsPrefix: mergedClsPrefixRef, mergedValue: mergedValueRef, mergedShow: mergedShowRef, namespace: namespaceRef, adjustedTo: useAdjustedTo(props), isMounted: useIsMounted(), focused: focusedRef, menuPadding: menuPaddingRef, mergedPlaceholder: mergedPlaceholderRef, mergedExpandedKeys: mergedExpandedKeysRef, treeSelectedKeys: treeSelectedKeysRef, treeCheckedKeys: treeCheckedKeysRef, mergedSize: mergedSizeRef, mergedDisabled: mergedDisabledRef, selectedOption: selectedOptionRef, selectedOptions: selectedOptionsRef, pattern: patternRef, pendingNodeKey: pendingNodeKeyRef, mergedCascade: mergedCascadeRef, mergedFilter: mergedFilterRef, selectionRenderTag: selectionRenderTagRef, handleTriggerOrMenuResize,\n            doUpdateExpandedKeys,\n            handleMenuLeave,\n            handleTriggerClick,\n            handleMenuClickoutside,\n            handleUpdateCheckedKeys,\n            handleUpdateIndeterminateKeys,\n            handleTriggerFocus,\n            handleTriggerBlur,\n            handleMenuFocusin,\n            handleMenuFocusout,\n            handleClear,\n            handleDeleteOption,\n            handlePatternInput,\n            handleKeydown,\n            handleTabOut,\n            handleMenuMousedown, mergedTheme: themeRef, cssVars: inlineThemeDisabled ? undefined : cssVarsRef, themeClass: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.themeClass, onRender: themeClassHandle === null || themeClassHandle === void 0 ? void 0 : themeClassHandle.onRender });\n    },\n    render() {\n        const { mergedTheme, mergedClsPrefix, $slots } = this;\n        return (h(\"div\", { class: `${mergedClsPrefix}-tree-select` },\n            h(VBinder, null, {\n                default: () => [\n                    h(VTarget, null, {\n                        default: () => (h(NInternalSelection, { ref: \"triggerInstRef\", onResize: this.handleTriggerOrMenuResize, status: this.mergedStatus, focused: this.focused, clsPrefix: mergedClsPrefix, theme: mergedTheme.peers.InternalSelection, themeOverrides: mergedTheme.peerOverrides.InternalSelection, renderTag: this.selectionRenderTag, selectedOption: this.selectedOption, selectedOptions: this.selectedOptions, size: this.mergedSize, bordered: this.bordered, placeholder: this.mergedPlaceholder, disabled: this.mergedDisabled, active: this.mergedShow, loading: this.loading, multiple: this.multiple, maxTagCount: this.maxTagCount, showArrow: true, filterable: this.filterable, clearable: this.clearable, pattern: this.pattern, onPatternInput: this.handlePatternInput, onClear: this.handleClear, onClick: this.handleTriggerClick, onFocus: this.handleTriggerFocus, onBlur: this.handleTriggerBlur, onDeleteOption: this.handleDeleteOption, onKeydown: this.handleKeydown }, {\n                            arrow: () => { var _a, _b; return [(_b = (_a = this.$slots).arrow) === null || _b === void 0 ? void 0 : _b.call(_a)]; }\n                        }))\n                    }),\n                    h(VFollower, { ref: \"followerInstRef\", show: this.mergedShow, placement: this.placement, to: this.adjustedTo, teleportDisabled: this.adjustedTo === useAdjustedTo.tdkey, containerClass: this.namespace, width: this.consistentMenuWidth ? 'target' : undefined, minWidth: \"target\" }, {\n                        default: () => (h(Transition, { name: \"fade-in-scale-up-transition\", appear: this.isMounted, onLeave: this.handleMenuLeave }, {\n                            default: () => {\n                                var _a;\n                                if (!this.mergedShow)\n                                    return null;\n                                const { mergedClsPrefix, checkable, multiple, menuProps, options } = this;\n                                (_a = this.onRender) === null || _a === void 0 ? void 0 : _a.call(this);\n                                return withDirectives(h(\"div\", Object.assign({}, menuProps, { class: [\n                                        `${mergedClsPrefix}-tree-select-menu`,\n                                        menuProps === null || menuProps === void 0 ? void 0 : menuProps.class,\n                                        this.themeClass\n                                    ], ref: \"menuElRef\", style: [\n                                        (menuProps === null || menuProps === void 0 ? void 0 : menuProps.style) || '',\n                                        this.cssVars\n                                    ], tabindex: 0, onMousedown: this.handleMenuMousedown, onKeydown: this.handleKeydown, onFocusin: this.handleMenuFocusin, onFocusout: this.handleMenuFocusout }),\n                                    h(NTree, { ref: \"treeInstRef\", blockLine: true, allowCheckingNotLoaded: this.allowCheckingNotLoaded, showIrrelevantNodes: false, animated: false, pattern: this.pattern, filter: this.mergedFilter, data: options, cancelable: multiple, labelField: this.labelField, keyField: this.keyField, disabledField: this.disabledField, childrenField: this.childrenField, theme: mergedTheme.peers.Tree, themeOverrides: mergedTheme.peerOverrides.Tree, defaultExpandAll: this.defaultExpandAll, defaultExpandedKeys: this.defaultExpandedKeys, expandedKeys: this.mergedExpandedKeys, checkedKeys: this.treeCheckedKeys, selectedKeys: this.treeSelectedKeys, checkable: checkable, checkStrategy: this.checkStrategy, cascade: this.mergedCascade, leafOnly: this.leafOnly, multiple: this.multiple, renderLabel: this.renderLabel, renderPrefix: this.renderPrefix, renderSuffix: this.renderSuffix, renderSwitcherIcon: this.renderSwitcherIcon, nodeProps: this.nodeProps, watchProps: this.watchProps, virtualScroll: this.consistentMenuWidth && this.virtualScroll, internalTreeSelect: true, internalUnifySelectCheck: true, internalScrollable: true, internalScrollablePadding: this.menuPadding, internalFocusable: false, internalCheckboxFocusable: false, internalRenderEmpty: () => (h(\"div\", { class: `${mergedClsPrefix}-tree-select-menu__empty` }, resolveSlot($slots.empty, () => [\n                                            h(NEmpty, { theme: mergedTheme.peers.Empty, themeOverrides: mergedTheme.peerOverrides.Empty })\n                                        ]))), onLoad: this.onLoad, onUpdateCheckedKeys: this.handleUpdateCheckedKeys, onUpdateIndeterminateKeys: this.handleUpdateIndeterminateKeys, onUpdateExpandedKeys: this.doUpdateExpandedKeys }),\n                                    resolveWrappedSlot($slots.action, (children) => {\n                                        return children ? (h(\"div\", { class: `${mergedClsPrefix}-tree-select-menu__action`, \"data-action\": true }, children)) : null;\n                                    }),\n                                    h(NBaseFocusDetector, { onFocus: this.handleTabOut })), [\n                                    [\n                                        clickoutside,\n                                        this.handleMenuClickoutside,\n                                        undefined,\n                                        { capture: true }\n                                    ]\n                                ]);\n                            }\n                        }))\n                    })\n                ]\n            })));\n    }\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
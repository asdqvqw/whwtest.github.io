{"ast":null,"code":"/*\n * QR Code generator library (TypeScript)\n *\n * Copyright (c) Project Nayuki. (MIT License)\n * https://www.nayuki.io/page/qr-code-generator-library\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy of\n * this software and associated documentation files (the \"Software\"), to deal in\n * the Software without restriction, including without limitation the rights to\n * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n * the Software, and to permit persons to whom the Software is furnished to do so,\n * subject to the following conditions:\n * - The above copyright notice and this permission notice shall be included in\n *   all copies or substantial portions of the Software.\n * - The Software is provided \"as is\", without warranty of any kind, express or\n *   implied, including but not limited to the warranties of merchantability,\n *   fitness for a particular purpose and noninfringement. In no event shall the\n *   authors or copyright holders be liable for any claim, damages or other\n *   liability, whether in an action of contract, tort or otherwise, arising from,\n *   out of or in connection with the Software or the use or other dealings in the\n *   Software.\n */\n'use strict';\n\n// eslint-disable-next-line @typescript-eslint/no-namespace\nimport \"core-js/modules/es.array.push.js\";\nvar qrcodegen;\n(function (qrcodegen) {\n  /* ---- QR Code symbol class ---- */\n  /*\n   * A QR Code symbol, which is a type of two-dimension barcode.\n   * Invented by Denso Wave and described in the ISO/IEC 18004 standard.\n   * Instances of this class represent an immutable square grid of dark and light cells.\n   * The class provides static factory functions to create a QR Code from text or binary data.\n   * The class covers the QR Code Model 2 specification, supporting all versions (sizes)\n   * from 1 to 40, all 4 error correction levels, and 4 character encoding modes.\n   *\n   * Ways to create a QR Code object:\n   * - High level: Take the payload data and call QrCode.encodeText() or QrCode.encodeBinary().\n   * - Mid level: Custom-make the list of segments and call QrCode.encodeSegments().\n   * - Low level: Custom-make the array of data codeword bytes (including\n   *   segment headers and final padding, excluding error correction codewords),\n   *   supply the appropriate version number, and call the QrCode() constructor.\n   * (Note that all ways require supplying the desired error correction level.)\n   */\n  class QrCode {\n    /* -- Static factory functions (high level) -- */\n    // Returns a QR Code representing the given Unicode text string at the given error correction level.\n    // As a conservative upper bound, this function is guaranteed to succeed for strings that have 738 or fewer\n    // Unicode code points (not UTF-16 code units) if the low error correction level is used. The smallest possible\n    // QR Code version is automatically chosen for the output. The ECC level of the result may be higher than the\n    // ecl argument if it can be done without increasing the version.\n    static encodeText(text, ecl) {\n      const segs = qrcodegen.QrSegment.makeSegments(text);\n      return QrCode.encodeSegments(segs, ecl);\n    }\n    // Returns a QR Code representing the given binary data at the given error correction level.\n    // This function always encodes using the binary segment mode, not any text mode. The maximum number of\n    // bytes allowed is 2953. The smallest possible QR Code version is automatically chosen for the output.\n    // The ECC level of the result may be higher than the ecl argument if it can be done without increasing the version.\n    static encodeBinary(data, ecl) {\n      const seg = qrcodegen.QrSegment.makeBytes(data);\n      return QrCode.encodeSegments([seg], ecl);\n    }\n    /* -- Static factory functions (mid level) -- */\n    // Returns a QR Code representing the given segments with the given encoding parameters.\n    // The smallest possible QR Code version within the given range is automatically\n    // chosen for the output. Iff boostEcl is true, then the ECC level of the result\n    // may be higher than the ecl argument if it can be done without increasing the\n    // version. The mask number is either between 0 to 7 (inclusive) to force that\n    // mask, or -1 to automatically choose an appropriate mask (which may be slow).\n    // This function allows the user to create a custom sequence of segments that switches\n    // between modes (such as alphanumeric and byte) to encode text in less space.\n    // This is a mid-level API; the high-level API is encodeText() and encodeBinary().\n    static encodeSegments(segs, ecl, minVersion = 1, maxVersion = 40, mask = -1, boostEcl = true) {\n      if (!(QrCode.MIN_VERSION <= minVersion && minVersion <= maxVersion && maxVersion <= QrCode.MAX_VERSION) || mask < -1 || mask > 7) {\n        throw new RangeError('Invalid value');\n      }\n      // Find the minimal version number to use\n      let version;\n      let dataUsedBits;\n      for (version = minVersion;; version++) {\n        const dataCapacityBits = QrCode.getNumDataCodewords(version, ecl) * 8; // Number of data bits available\n        const usedBits = QrSegment.getTotalBits(segs, version);\n        if (usedBits <= dataCapacityBits) {\n          dataUsedBits = usedBits;\n          break; // This version number is found to be suitable\n        }\n        if (version >= maxVersion) {\n          // All versions in the range could not fit the given data\n          throw new RangeError('Data too long');\n        }\n      }\n      // Increase the error correction level while the data still fits in the current version number\n      for (const newEcl of [QrCode.Ecc.MEDIUM, QrCode.Ecc.QUARTILE, QrCode.Ecc.HIGH]) {\n        // From low to high\n        if (boostEcl && dataUsedBits <= QrCode.getNumDataCodewords(version, newEcl) * 8) {\n          ecl = newEcl;\n        }\n      }\n      // Concatenate all segments to create the data bit string\n      const bb = [];\n      for (const seg of segs) {\n        appendBits(seg.mode.modeBits, 4, bb);\n        appendBits(seg.numChars, seg.mode.numCharCountBits(version), bb);\n        for (const b of seg.getData()) {\n          bb.push(b);\n        }\n      }\n      // Add terminator and pad up to a byte if applicable\n      const dataCapacityBits = QrCode.getNumDataCodewords(version, ecl) * 8;\n      appendBits(0, Math.min(4, dataCapacityBits - bb.length), bb);\n      appendBits(0, (8 - bb.length % 8) % 8, bb);\n      // Pad with alternating bytes until data capacity is reached\n      for (let padByte = 0xec; bb.length < dataCapacityBits; padByte ^= 0xec ^ 0x11) {\n        appendBits(padByte, 8, bb);\n      }\n      // Pack bits into bytes in big endian\n      const dataCodewords = [];\n      while (dataCodewords.length * 8 < bb.length) {\n        dataCodewords.push(0);\n      }\n      bb.forEach((b, i) => dataCodewords[i >>> 3] |= b << 7 - (i & 7));\n      // Create the QR Code object\n      return new QrCode(version, ecl, dataCodewords, mask);\n    }\n    /* -- Constructor (low level) and fields -- */\n    // Creates a new QR Code with the given version number,\n    // error correction level, data codeword bytes, and mask number.\n    // This is a low-level API that most users should not use directly.\n    // A mid-level API is the encodeSegments() function.\n    constructor(\n    // The version number of this QR Code, which is between 1 and 40 (inclusive).\n    // This determines the size of this barcode.\n    version,\n    // The error correction level used in this QR Code.\n    errorCorrectionLevel, dataCodewords, msk) {\n      this.version = version;\n      this.errorCorrectionLevel = errorCorrectionLevel;\n      // The modules of this QR Code (false = light, true = dark).\n      // Immutable after constructor finishes. Accessed through getModule().\n      this.modules = [];\n      // Indicates function modules that are not subjected to masking. Discarded when constructor finishes.\n      this.isFunction = [];\n      // Check scalar arguments\n      if (version < QrCode.MIN_VERSION || version > QrCode.MAX_VERSION) {\n        throw new RangeError('Version value out of range');\n      }\n      if (msk < -1 || msk > 7) {\n        throw new RangeError('Mask value out of range');\n      }\n      this.size = version * 4 + 17;\n      // Initialize both grids to be size*size arrays of Boolean false\n      const row = [];\n      for (let i = 0; i < this.size; i++) {\n        row.push(false);\n      }\n      for (let i = 0; i < this.size; i++) {\n        this.modules.push(row.slice()); // Initially all light\n        this.isFunction.push(row.slice());\n      }\n      // Compute ECC, draw modules\n      this.drawFunctionPatterns();\n      const allCodewords = this.addEccAndInterleave(dataCodewords);\n      this.drawCodewords(allCodewords);\n      // Do masking\n      if (msk === -1) {\n        // Automatically choose best mask\n        let minPenalty = 1000000000;\n        for (let i = 0; i < 8; i++) {\n          this.applyMask(i);\n          this.drawFormatBits(i);\n          const penalty = this.getPenaltyScore();\n          if (penalty < minPenalty) {\n            msk = i;\n            minPenalty = penalty;\n          }\n          this.applyMask(i); // Undoes the mask due to XOR\n        }\n      }\n      this.mask = msk;\n      this.applyMask(msk); // Apply the final choice of mask\n      this.drawFormatBits(msk); // Overwrite old format bits\n      this.isFunction = [];\n    }\n    /* -- Accessor methods -- */\n    // Returns the color of the module (pixel) at the given coordinates, which is false\n    // for light or true for dark. The top left corner has the coordinates (x=0, y=0).\n    // If the given coordinates are out of bounds, then false (light) is returned.\n    getModule(x, y) {\n      return x >= 0 && x < this.size && y >= 0 && y < this.size && this.modules[y][x];\n    }\n    /* -- Private helper methods for constructor: Drawing function modules -- */\n    // Reads this object's version field, and draws and marks all function modules.\n    drawFunctionPatterns() {\n      // Draw horizontal and vertical timing patterns\n      for (let i = 0; i < this.size; i++) {\n        this.setFunctionModule(6, i, i % 2 === 0);\n        this.setFunctionModule(i, 6, i % 2 === 0);\n      }\n      // Draw 3 finder patterns (all corners except bottom right; overwrites some timing modules)\n      this.drawFinderPattern(3, 3);\n      this.drawFinderPattern(this.size - 4, 3);\n      this.drawFinderPattern(3, this.size - 4);\n      // Draw numerous alignment patterns\n      const alignPatPos = this.getAlignmentPatternPositions();\n      const numAlign = alignPatPos.length;\n      for (let i = 0; i < numAlign; i++) {\n        for (let j = 0; j < numAlign; j++) {\n          // Don't draw on the three finder corners\n          if (!(i === 0 && j === 0 || i === 0 && j === numAlign - 1 || i === numAlign - 1 && j === 0)) {\n            this.drawAlignmentPattern(alignPatPos[i], alignPatPos[j]);\n          }\n        }\n      }\n      // Draw configuration data\n      this.drawFormatBits(0); // Dummy mask value; overwritten later in the constructor\n      this.drawVersion();\n    }\n    // Draws two copies of the format bits (with its own error correction code)\n    // based on the given mask and this object's error correction level field.\n    drawFormatBits(mask) {\n      // Calculate error correction code and pack bits\n      const data = this.errorCorrectionLevel.formatBits << 3 | mask; // errCorrLvl is uint2, mask is uint3\n      let rem = data;\n      for (let i = 0; i < 10; i++) {\n        rem = rem << 1 ^ (rem >>> 9) * 0x537;\n      }\n      const bits = (data << 10 | rem) ^ 0x5412; // uint15\n      // Draw first copy\n      for (let i = 0; i <= 5; i++) {\n        this.setFunctionModule(8, i, getBit(bits, i));\n      }\n      this.setFunctionModule(8, 7, getBit(bits, 6));\n      this.setFunctionModule(8, 8, getBit(bits, 7));\n      this.setFunctionModule(7, 8, getBit(bits, 8));\n      for (let i = 9; i < 15; i++) {\n        this.setFunctionModule(14 - i, 8, getBit(bits, i));\n      }\n      // Draw second copy\n      for (let i = 0; i < 8; i++) {\n        this.setFunctionModule(this.size - 1 - i, 8, getBit(bits, i));\n      }\n      for (let i = 8; i < 15; i++) {\n        this.setFunctionModule(8, this.size - 15 + i, getBit(bits, i));\n      }\n      this.setFunctionModule(8, this.size - 8, true); // Always dark\n    }\n    // Draws two copies of the version bits (with its own error correction code),\n    // based on this object's version field, iff 7 <= version <= 40.\n    drawVersion() {\n      if (this.version < 7) {\n        return;\n      }\n      // Calculate error correction code and pack bits\n      let rem = this.version; // version is uint6, in the range [7, 40]\n      for (let i = 0; i < 12; i++) {\n        rem = rem << 1 ^ (rem >>> 11) * 0x1f25;\n      }\n      const bits = this.version << 12 | rem; // uint18\n      // Draw two copies\n      for (let i = 0; i < 18; i++) {\n        const color = getBit(bits, i);\n        const a = this.size - 11 + i % 3;\n        const b = Math.floor(i / 3);\n        this.setFunctionModule(a, b, color);\n        this.setFunctionModule(b, a, color);\n      }\n    }\n    // Draws a 9*9 finder pattern including the border separator,\n    // with the center module at (x, y). Modules can be out of bounds.\n    drawFinderPattern(x, y) {\n      for (let dy = -4; dy <= 4; dy++) {\n        for (let dx = -4; dx <= 4; dx++) {\n          const dist = Math.max(Math.abs(dx), Math.abs(dy)); // Chebyshev/infinity norm\n          const xx = x + dx;\n          const yy = y + dy;\n          if (xx >= 0 && xx < this.size && yy >= 0 && yy < this.size) {\n            this.setFunctionModule(xx, yy, dist !== 2 && dist !== 4);\n          }\n        }\n      }\n    }\n    // Draws a 5*5 alignment pattern, with the center module\n    // at (x, y). All modules must be in bounds.\n    drawAlignmentPattern(x, y) {\n      for (let dy = -2; dy <= 2; dy++) {\n        for (let dx = -2; dx <= 2; dx++) {\n          this.setFunctionModule(x + dx, y + dy, Math.max(Math.abs(dx), Math.abs(dy)) !== 1);\n        }\n      }\n    }\n    // Sets the color of a module and marks it as a function module.\n    // Only used by the constructor. Coordinates must be in bounds.\n    setFunctionModule(x, y, isDark) {\n      this.modules[y][x] = isDark;\n      this.isFunction[y][x] = true;\n    }\n    /* -- Private helper methods for constructor: Codewords and masking -- */\n    // Returns a new byte string representing the given data with the appropriate error correction\n    // codewords appended to it, based on this object's version and error correction level.\n    addEccAndInterleave(data) {\n      const ver = this.version;\n      const ecl = this.errorCorrectionLevel;\n      if (data.length !== QrCode.getNumDataCodewords(ver, ecl)) {\n        throw new RangeError('Invalid argument');\n      }\n      // Calculate parameter numbers\n      const numBlocks = QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver];\n      const blockEccLen = QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver];\n      const rawCodewords = Math.floor(QrCode.getNumRawDataModules(ver) / 8);\n      const numShortBlocks = numBlocks - rawCodewords % numBlocks;\n      const shortBlockLen = Math.floor(rawCodewords / numBlocks);\n      // Split data into blocks and append ECC to each block\n      const blocks = [];\n      const rsDiv = QrCode.reedSolomonComputeDivisor(blockEccLen);\n      for (let i = 0, k = 0; i < numBlocks; i++) {\n        const dat = data.slice(k, k + shortBlockLen - blockEccLen + (i < numShortBlocks ? 0 : 1));\n        k += dat.length;\n        const ecc = QrCode.reedSolomonComputeRemainder(dat, rsDiv);\n        if (i < numShortBlocks) {\n          dat.push(0);\n        }\n        blocks.push(dat.concat(ecc));\n      }\n      // Interleave (not concatenate) the bytes from every block into a single sequence\n      const result = [];\n      for (let i = 0; i < blocks[0].length; i++) {\n        blocks.forEach((block, j) => {\n          // Skip the padding byte in short blocks\n          if (i !== shortBlockLen - blockEccLen || j >= numShortBlocks) {\n            result.push(block[i]);\n          }\n        });\n      }\n      return result;\n    }\n    // Draws the given sequence of 8-bit codewords (data and error correction) onto the entire\n    // data area of this QR Code. Function modules need to be marked off before this is called.\n    drawCodewords(data) {\n      if (data.length !== Math.floor(QrCode.getNumRawDataModules(this.version) / 8)) {\n        throw new RangeError('Invalid argument');\n      }\n      let i = 0; // Bit index into the data\n      // Do the funny zigzag scan\n      for (let right = this.size - 1; right >= 1; right -= 2) {\n        // Index of right column in each column pair\n        if (right === 6) {\n          right = 5;\n        }\n        for (let vert = 0; vert < this.size; vert++) {\n          // Vertical counter\n          for (let j = 0; j < 2; j++) {\n            const x = right - j; // Actual x coordinate\n            const upward = (right + 1 & 2) === 0;\n            const y = upward ? this.size - 1 - vert : vert; // Actual y coordinate\n            if (!this.isFunction[y][x] && i < data.length * 8) {\n              this.modules[y][x] = getBit(data[i >>> 3], 7 - (i & 7));\n              i++;\n            }\n            // If this QR Code has any remainder bits (0 to 7), they were assigned as\n            // 0/false/light by the constructor and are left unchanged by this method\n          }\n        }\n      }\n    }\n    // XORs the codeword modules in this QR Code with the given mask pattern.\n    // The function modules must be marked and the codeword bits must be drawn\n    // before masking. Due to the arithmetic of XOR, calling applyMask() with\n    // the same mask value a second time will undo the mask. A final well-formed\n    // QR Code needs exactly one (not zero, two, etc.) mask applied.\n    applyMask(mask) {\n      if (mask < 0 || mask > 7) {\n        throw new RangeError('Mask value out of range');\n      }\n      for (let y = 0; y < this.size; y++) {\n        for (let x = 0; x < this.size; x++) {\n          let invert;\n          switch (mask) {\n            case 0:\n              invert = (x + y) % 2 === 0;\n              break;\n            case 1:\n              invert = y % 2 === 0;\n              break;\n            case 2:\n              invert = x % 3 === 0;\n              break;\n            case 3:\n              invert = (x + y) % 3 === 0;\n              break;\n            case 4:\n              invert = (Math.floor(x / 3) + Math.floor(y / 2)) % 2 === 0;\n              break;\n            case 5:\n              invert = x * y % 2 + x * y % 3 === 0;\n              break;\n            case 6:\n              invert = (x * y % 2 + x * y % 3) % 2 === 0;\n              break;\n            case 7:\n              invert = ((x + y) % 2 + x * y % 3) % 2 === 0;\n              break;\n            default:\n              throw new Error('Unreachable');\n          }\n          if (!this.isFunction[y][x] && invert) {\n            this.modules[y][x] = !this.modules[y][x];\n          }\n        }\n      }\n    }\n    // Calculates and returns the penalty score based on state of this QR Code's current modules.\n    // This is used by the automatic mask choice algorithm to find the mask pattern that yields the lowest score.\n    getPenaltyScore() {\n      let result = 0;\n      // Adjacent modules in row having same color, and finder-like patterns\n      for (let y = 0; y < this.size; y++) {\n        let runColor = false;\n        let runX = 0;\n        const runHistory = [0, 0, 0, 0, 0, 0, 0];\n        for (let x = 0; x < this.size; x++) {\n          if (this.modules[y][x] === runColor) {\n            runX++;\n            if (runX === 5) {\n              result += QrCode.PENALTY_N1;\n            } else if (runX > 5) {\n              result++;\n            }\n          } else {\n            this.finderPenaltyAddHistory(runX, runHistory);\n            if (!runColor) {\n              result += this.finderPenaltyCountPatterns(runHistory) * QrCode.PENALTY_N3;\n            }\n            runColor = this.modules[y][x];\n            runX = 1;\n          }\n        }\n        result += this.finderPenaltyTerminateAndCount(runColor, runX, runHistory) * QrCode.PENALTY_N3;\n      }\n      // Adjacent modules in column having same color, and finder-like patterns\n      for (let x = 0; x < this.size; x++) {\n        let runColor = false;\n        let runY = 0;\n        const runHistory = [0, 0, 0, 0, 0, 0, 0];\n        for (let y = 0; y < this.size; y++) {\n          if (this.modules[y][x] === runColor) {\n            runY++;\n            if (runY === 5) {\n              result += QrCode.PENALTY_N1;\n            } else if (runY > 5) {\n              result++;\n            }\n          } else {\n            this.finderPenaltyAddHistory(runY, runHistory);\n            if (!runColor) {\n              result += this.finderPenaltyCountPatterns(runHistory) * QrCode.PENALTY_N3;\n            }\n            runColor = this.modules[y][x];\n            runY = 1;\n          }\n        }\n        result += this.finderPenaltyTerminateAndCount(runColor, runY, runHistory) * QrCode.PENALTY_N3;\n      }\n      // 2*2 blocks of modules having same color\n      for (let y = 0; y < this.size - 1; y++) {\n        for (let x = 0; x < this.size - 1; x++) {\n          const color = this.modules[y][x];\n          if (color === this.modules[y][x + 1] && color === this.modules[y + 1][x] && color === this.modules[y + 1][x + 1]) {\n            result += QrCode.PENALTY_N2;\n          }\n        }\n      }\n      // Balance of dark and light modules\n      let dark = 0;\n      for (const row of this.modules) {\n        dark = row.reduce((sum, color) => sum + (color ? 1 : 0), dark);\n      }\n      const total = this.size * this.size; // Note that size is odd, so dark/total != 1/2\n      // Compute the smallest integer k >= 0 such that (45-5k)% <= dark/total <= (55+5k)%\n      const k = Math.ceil(Math.abs(dark * 20 - total * 10) / total) - 1;\n      result += k * QrCode.PENALTY_N4;\n      return result;\n    }\n    /* -- Private helper functions -- */\n    // Returns an ascending list of positions of alignment patterns for this version number.\n    // Each position is in the range [0,177), and are used on both the x and y axes.\n    // This could be implemented as lookup table of 40 variable-length lists of integers.\n    getAlignmentPatternPositions() {\n      if (this.version === 1) {\n        return [];\n      } else {\n        const numAlign = Math.floor(this.version / 7) + 2;\n        const step = this.version === 32 ? 26 : Math.ceil((this.version * 4 + 4) / (numAlign * 2 - 2)) * 2;\n        const result = [6];\n        for (let pos = this.size - 7; result.length < numAlign; pos -= step) {\n          result.splice(1, 0, pos);\n        }\n        return result;\n      }\n    }\n    // Returns the number of data bits that can be stored in a QR Code of the given version number, after\n    // all function modules are excluded. This includes remainder bits, so it might not be a multiple of 8.\n    // The result is in the range [208, 29648]. This could be implemented as a 40-entry lookup table.\n    static getNumRawDataModules(ver) {\n      if (ver < QrCode.MIN_VERSION || ver > QrCode.MAX_VERSION) {\n        throw new RangeError('Version number out of range');\n      }\n      let result = (16 * ver + 128) * ver + 64;\n      if (ver >= 2) {\n        const numAlign = Math.floor(ver / 7) + 2;\n        result -= (25 * numAlign - 10) * numAlign - 55;\n        if (ver >= 7) {\n          result -= 36;\n        }\n      }\n      return result;\n    }\n    // Returns the number of 8-bit data (i.e. not error correction) codewords contained in any\n    // QR Code of the given version number and error correction level, with remainder bits discarded.\n    // This stateless pure function could be implemented as a (40*4)-cell lookup table.\n    static getNumDataCodewords(ver, ecl) {\n      return Math.floor(QrCode.getNumRawDataModules(ver) / 8) - QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver] * QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver];\n    }\n    // Returns a Reed-Solomon ECC generator polynomial for the given degree. This could be\n    // implemented as a lookup table over all possible parameter values, instead of as an algorithm.\n    static reedSolomonComputeDivisor(degree) {\n      if (degree < 1 || degree > 255) {\n        throw new RangeError('Degree out of range');\n      }\n      // Polynomial coefficients are stored from highest to lowest power, excluding the leading term which is always 1.\n      // For example the polynomial x^3 + 255x^2 + 8x + 93 is stored as the uint8 array [255, 8, 93].\n      const result = [];\n      for (let i = 0; i < degree - 1; i++) {\n        result.push(0);\n      }\n      result.push(1); // Start off with the monomial x^0\n      // Compute the product polynomial (x - r^0) * (x - r^1) * (x - r^2) * ... * (x - r^{degree-1}),\n      // and drop the highest monomial term which is always 1x^degree.\n      // Note that r = 0x02, which is a generator element of this field GF(2^8/0x11D).\n      let root = 1;\n      for (let i = 0; i < degree; i++) {\n        // Multiply the current product by (x - r^i)\n        for (let j = 0; j < result.length; j++) {\n          result[j] = QrCode.reedSolomonMultiply(result[j], root);\n          if (j + 1 < result.length) {\n            result[j] ^= result[j + 1];\n          }\n        }\n        root = QrCode.reedSolomonMultiply(root, 0x02);\n      }\n      return result;\n    }\n    // Returns the Reed-Solomon error correction codeword for the given data and divisor polynomials.\n    static reedSolomonComputeRemainder(data, divisor) {\n      const result = divisor.map(_ => 0);\n      for (const b of data) {\n        // Polynomial division\n        // eslint-disable-next-line @typescript-eslint/non-nullable-type-assertion-style\n        const factor = b ^ result.shift();\n        result.push(0);\n        divisor.forEach((coef, i) => result[i] ^= QrCode.reedSolomonMultiply(coef, factor));\n      }\n      return result;\n    }\n    // Returns the product of the two given field elements modulo GF(2^8/0x11D). The arguments and result\n    // are unsigned 8-bit integers. This could be implemented as a lookup table of 256*256 entries of uint8.\n    static reedSolomonMultiply(x, y) {\n      if (x >>> 8 !== 0 || y >>> 8 !== 0) {\n        throw new RangeError('Byte out of range');\n      }\n      // Russian peasant multiplication\n      let z = 0;\n      for (let i = 7; i >= 0; i--) {\n        z = z << 1 ^ (z >>> 7) * 0x11d;\n        z ^= (y >>> i & 1) * x;\n      }\n      return z;\n    }\n    // Can only be called immediately after a light run is added, and\n    // returns either 0, 1, or 2. A helper function for getPenaltyScore().\n    finderPenaltyCountPatterns(runHistory) {\n      const n = runHistory[1];\n      const core = n > 0 && runHistory[2] === n && runHistory[3] === n * 3 && runHistory[4] === n && runHistory[5] === n;\n      return (core && runHistory[0] >= n * 4 && runHistory[6] >= n ? 1 : 0) + (core && runHistory[6] >= n * 4 && runHistory[0] >= n ? 1 : 0);\n    }\n    // Must be called at the end of a line (row or column) of modules. A helper function for getPenaltyScore().\n    finderPenaltyTerminateAndCount(currentRunColor, currentRunLength, runHistory) {\n      if (currentRunColor) {\n        // Terminate dark run\n        this.finderPenaltyAddHistory(currentRunLength, runHistory);\n        currentRunLength = 0;\n      }\n      currentRunLength += this.size; // Add light border to final run\n      this.finderPenaltyAddHistory(currentRunLength, runHistory);\n      return this.finderPenaltyCountPatterns(runHistory);\n    }\n    // Pushes the given value to the front and drops the last value. A helper function for getPenaltyScore().\n    finderPenaltyAddHistory(currentRunLength, runHistory) {\n      if (runHistory[0] === 0) {\n        currentRunLength += this.size;\n      } // Add light border to initial run\n      runHistory.pop();\n      runHistory.unshift(currentRunLength);\n    }\n  }\n  /* -- Constants and tables -- */\n  // The minimum version number supported in the QR Code Model 2 standard.\n  QrCode.MIN_VERSION = 1;\n  // The maximum version number supported in the QR Code Model 2 standard.\n  QrCode.MAX_VERSION = 40;\n  // For use in getPenaltyScore(), when evaluating which mask is best.\n  QrCode.PENALTY_N1 = 3;\n  QrCode.PENALTY_N2 = 3;\n  QrCode.PENALTY_N3 = 40;\n  QrCode.PENALTY_N4 = 10;\n  QrCode.ECC_CODEWORDS_PER_BLOCK = [\n  // Version: (note that index 0 is for padding, and is set to an illegal value)\n  // 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40    Error correction level\n  [-1, 7, 10, 15, 20, 26, 18, 20, 24, 30, 18, 20, 24, 26, 30, 22, 24, 28, 30, 28, 28, 28, 28, 30, 30, 26, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30],\n  // Low\n  [-1, 10, 16, 26, 18, 24, 16, 18, 22, 22, 26, 30, 22, 22, 24, 24, 28, 28, 26, 26, 26, 26, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28],\n  // Medium\n  [-1, 13, 22, 18, 26, 18, 24, 18, 22, 20, 24, 28, 26, 24, 20, 30, 24, 28, 28, 26, 30, 28, 30, 30, 30, 30, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30],\n  // Quartile\n  [-1, 17, 28, 22, 16, 22, 28, 26, 26, 24, 28, 24, 28, 22, 24, 24, 30, 28, 28, 26, 28, 30, 24, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30] // High\n  ];\n  QrCode.NUM_ERROR_CORRECTION_BLOCKS = [\n  // Version: (note that index 0 is for padding, and is set to an illegal value)\n  // 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40    Error correction level\n  [-1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 4, 6, 6, 6, 6, 7, 8, 8, 9, 9, 10, 12, 12, 12, 13, 14, 15, 16, 17, 18, 19, 19, 20, 21, 22, 24, 25],\n  // Low\n  [-1, 1, 1, 1, 2, 2, 4, 4, 4, 5, 5, 5, 8, 9, 9, 10, 10, 11, 13, 14, 16, 17, 17, 18, 20, 21, 23, 25, 26, 28, 29, 31, 33, 35, 37, 38, 40, 43, 45, 47, 49],\n  // Medium\n  [-1, 1, 1, 2, 2, 4, 4, 6, 6, 8, 8, 8, 10, 12, 16, 12, 17, 16, 18, 21, 20, 23, 23, 25, 27, 29, 34, 34, 35, 38, 40, 43, 45, 48, 51, 53, 56, 59, 62, 65, 68],\n  // Quartile\n  [-1, 1, 1, 2, 4, 4, 4, 5, 6, 8, 8, 11, 11, 16, 16, 18, 16, 19, 21, 25, 25, 25, 34, 30, 32, 35, 37, 40, 42, 45, 48, 51, 54, 57, 60, 63, 66, 70, 74, 77, 81] // High\n  ];\n  qrcodegen.QrCode = QrCode;\n  // Appends the given number of low-order bits of the given value\n  // to the given buffer. Requires 0 <= len <= 31 and 0 <= val < 2^len.\n  function appendBits(val, len, bb) {\n    if (len < 0 || len > 31 || val >>> len !== 0) {\n      throw new RangeError('Value out of range');\n    }\n    for (let i = len - 1; i >= 0; i-- // Append bit by bit\n    ) {\n      bb.push(val >>> i & 1);\n    }\n  }\n  // Returns true iff the i'th bit of x is set to 1.\n  function getBit(x, i) {\n    return (x >>> i & 1) !== 0;\n  }\n  /* ---- Data segment class ---- */\n  /*\n   * A segment of character/binary/control data in a QR Code symbol.\n   * Instances of this class are immutable.\n   * The mid-level way to create a segment is to take the payload data\n   * and call a static factory function such as QrSegment.makeNumeric().\n   * The low-level way to create a segment is to custom-make the bit buffer\n   * and call the QrSegment() constructor with appropriate values.\n   * This segment class imposes no length restrictions, but QR Codes have restrictions.\n   * Even in the most favorable conditions, a QR Code can only hold 7089 characters of data.\n   * Any segment longer than this is meaningless for the purpose of generating QR Codes.\n   */\n  class QrSegment {\n    /* -- Static factory functions (mid level) -- */\n    // Returns a segment representing the given binary data encoded in\n    // byte mode. All input byte arrays are acceptable. Any text string\n    // can be converted to UTF-8 bytes and encoded as a byte mode segment.\n    static makeBytes(data) {\n      const bb = [];\n      for (const b of data) {\n        appendBits(b, 8, bb);\n      }\n      return new QrSegment(QrSegment.Mode.BYTE, data.length, bb);\n    }\n    // Returns a segment representing the given string of decimal digits encoded in numeric mode.\n    static makeNumeric(digits) {\n      if (!QrSegment.isNumeric(digits)) {\n        throw new RangeError('String contains non-numeric characters');\n      }\n      const bb = [];\n      for (let i = 0; i < digits.length;) {\n        // Consume up to 3 digits per iteration\n        const n = Math.min(digits.length - i, 3);\n        appendBits(parseInt(digits.substr(i, n), 10), n * 3 + 1, bb);\n        i += n;\n      }\n      return new QrSegment(QrSegment.Mode.NUMERIC, digits.length, bb);\n    }\n    // Returns a segment representing the given text string encoded in alphanumeric mode.\n    // The characters allowed are: 0 to 9, A to Z (uppercase only), space,\n    // dollar, percent, asterisk, plus, hyphen, period, slash, colon.\n    static makeAlphanumeric(text) {\n      if (!QrSegment.isAlphanumeric(text)) {\n        throw new RangeError('String contains unencodable characters in alphanumeric mode');\n      }\n      const bb = [];\n      let i;\n      for (i = 0; i + 2 <= text.length; i += 2) {\n        // Process groups of 2\n        let temp = QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)) * 45;\n        temp += QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i + 1));\n        appendBits(temp, 11, bb);\n      }\n      if (i < text.length) {\n        // 1 character remaining\n        appendBits(QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)), 6, bb);\n      }\n      return new QrSegment(QrSegment.Mode.ALPHANUMERIC, text.length, bb);\n    }\n    // Returns a new mutable list of zero or more segments to represent the given Unicode text string.\n    // The result may use various segment modes and switch modes to optimize the length of the bit stream.\n    static makeSegments(text) {\n      // Select the most efficient segment encoding automatically\n      if (text === '') {\n        return [];\n      } else if (QrSegment.isNumeric(text)) {\n        return [QrSegment.makeNumeric(text)];\n      } else if (QrSegment.isAlphanumeric(text)) {\n        return [QrSegment.makeAlphanumeric(text)];\n      } else {\n        return [QrSegment.makeBytes(QrSegment.toUtf8ByteArray(text))];\n      }\n    }\n    // Returns a segment representing an Extended Channel Interpretation\n    // (ECI) designator with the given assignment value.\n    static makeEci(assignVal) {\n      const bb = [];\n      if (assignVal < 0) {\n        throw new RangeError('ECI assignment value out of range');\n      } else if (assignVal < 1 << 7) {\n        appendBits(assignVal, 8, bb);\n      } else if (assignVal < 1 << 14) {\n        appendBits(0b10, 2, bb);\n        appendBits(assignVal, 14, bb);\n      } else if (assignVal < 1000000) {\n        appendBits(0b110, 3, bb);\n        appendBits(assignVal, 21, bb);\n      } else {\n        throw new RangeError('ECI assignment value out of range');\n      }\n      return new QrSegment(QrSegment.Mode.ECI, 0, bb);\n    }\n    // Tests whether the given string can be encoded as a segment in numeric mode.\n    // A string is encodable iff each character is in the range 0 to 9.\n    static isNumeric(text) {\n      return QrSegment.NUMERIC_REGEX.test(text);\n    }\n    // Tests whether the given string can be encoded as a segment in alphanumeric mode.\n    // A string is encodable iff each character is in the following set: 0 to 9, A to Z\n    // (uppercase only), space, dollar, percent, asterisk, plus, hyphen, period, slash, colon.\n    static isAlphanumeric(text) {\n      return QrSegment.ALPHANUMERIC_REGEX.test(text);\n    }\n    /* -- Constructor (low level) and fields -- */\n    // Creates a new QR Code segment with the given attributes and data.\n    // The character count (numChars) must agree with the mode and the bit buffer length,\n    // but the constraint isn't checked. The given bit buffer is cloned and stored.\n    constructor(\n    // The mode indicator of this segment.\n    mode,\n    // The length of this segment's unencoded data. Measured in characters for\n    // numeric/alphanumeric/kanji mode, bytes for byte mode, and 0 for ECI mode.\n    // Always zero or positive. Not the same as the data's bit length.\n    numChars,\n    // The data bits of this segment. Accessed through getData().\n    bitData) {\n      this.mode = mode;\n      this.numChars = numChars;\n      this.bitData = bitData;\n      if (numChars < 0) {\n        throw new RangeError('Invalid argument');\n      }\n      this.bitData = bitData.slice(); // Make defensive copy\n    }\n    /* -- Methods -- */\n    // Returns a new copy of the data bits of this segment.\n    getData() {\n      return this.bitData.slice(); // Make defensive copy\n    }\n    // (Package-private) Calculates and returns the number of bits needed to encode the given segments at\n    // the given version. The result is infinity if a segment has too many characters to fit its length field.\n    static getTotalBits(segs, version) {\n      let result = 0;\n      for (const seg of segs) {\n        const ccbits = seg.mode.numCharCountBits(version);\n        if (seg.numChars >= 1 << ccbits) {\n          return Infinity;\n        } // The segment's length doesn't fit the field's bit width\n        result += 4 + ccbits + seg.bitData.length;\n      }\n      return result;\n    }\n    // Returns a new array of bytes representing the given string encoded in UTF-8.\n    static toUtf8ByteArray(str) {\n      str = encodeURI(str);\n      const result = [];\n      for (let i = 0; i < str.length; i++) {\n        if (str.charAt(i) !== '%') {\n          result.push(str.charCodeAt(i));\n        } else {\n          result.push(parseInt(str.substr(i + 1, 2), 16));\n          i += 2;\n        }\n      }\n      return result;\n    }\n  }\n  /* -- Constants -- */\n  // Describes precisely all strings that are encodable in numeric mode.\n  QrSegment.NUMERIC_REGEX = /^[0-9]*$/;\n  // Describes precisely all strings that are encodable in alphanumeric mode.\n  QrSegment.ALPHANUMERIC_REGEX = /^[A-Z0-9 $%*+./:-]*$/;\n  // The set of all legal characters in alphanumeric mode,\n  // where each character value maps to the index in the string.\n  QrSegment.ALPHANUMERIC_CHARSET = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:';\n  qrcodegen.QrSegment = QrSegment;\n})(qrcodegen || (qrcodegen = {}));\n/* ---- Public helper enumeration ---- */\n// eslint-disable-next-line @typescript-eslint/no-namespace\n(function (qrcodegen) {\n  var QrCode;\n  (function (QrCode) {\n    /*\n     * The error correction level in a QR Code symbol. Immutable.\n     */\n    class Ecc {\n      /* -- Constructor and fields -- */\n      constructor(\n      // In the range 0 to 3 (unsigned 2-bit integer).\n      ordinal,\n      // (Package-private) In the range 0 to 3 (unsigned 2-bit integer).\n      formatBits) {\n        this.ordinal = ordinal;\n        this.formatBits = formatBits;\n      }\n    }\n    /* -- Constants -- */\n    Ecc.LOW = new Ecc(0, 1); // The QR Code can tolerate about  7% erroneous codewords\n    Ecc.MEDIUM = new Ecc(1, 0); // The QR Code can tolerate about 15% erroneous codewords\n    Ecc.QUARTILE = new Ecc(2, 3); // The QR Code can tolerate about 25% erroneous codewords\n    Ecc.HIGH = new Ecc(3, 2); // The QR Code can tolerate about 30% erroneous codewords\n    QrCode.Ecc = Ecc;\n  })(QrCode = qrcodegen.QrCode || (qrcodegen.QrCode = {}));\n})(qrcodegen || (qrcodegen = {}));\n/* ---- Public helper enumeration ---- */\n// eslint-disable-next-line @typescript-eslint/no-namespace\n(function (qrcodegen) {\n  var QrSegment;\n  (function (QrSegment) {\n    /*\n     * Describes how a segment's data bits are interpreted. Immutable.\n     */\n    class Mode {\n      /* -- Constructor and fields -- */\n      constructor(\n      // The mode indicator bits, which is a uint4 value (range 0 to 15).\n      modeBits,\n      // Number of character count bits for three different version ranges.\n      numBitsCharCount) {\n        this.modeBits = modeBits;\n        this.numBitsCharCount = numBitsCharCount;\n      }\n      /* -- Method -- */\n      // (Package-private) Returns the bit width of the character count field for a segment in\n      // this mode in a QR Code at the given version number. The result is in the range [0, 16].\n      numCharCountBits(ver) {\n        return this.numBitsCharCount[Math.floor((ver + 7) / 17)];\n      }\n    }\n    /* -- Constants -- */\n    Mode.NUMERIC = new Mode(0x1, [10, 12, 14]);\n    Mode.ALPHANUMERIC = new Mode(0x2, [9, 11, 13]);\n    Mode.BYTE = new Mode(0x4, [8, 16, 16]);\n    Mode.KANJI = new Mode(0x8, [8, 10, 12]);\n    Mode.ECI = new Mode(0x7, [0, 0, 0]);\n    QrSegment.Mode = Mode;\n  })(QrSegment = qrcodegen.QrSegment || (qrcodegen.QrSegment = {}));\n})(qrcodegen || (qrcodegen = {}));\nexport default qrcodegen;","map":{"version":3,"names":["qrcodegen","QrCode","encodeText","text","ecl","segs","QrSegment","makeSegments","encodeSegments","encodeBinary","data","seg","makeBytes","minVersion","maxVersion","mask","boostEcl","MIN_VERSION","MAX_VERSION","RangeError","version","dataUsedBits","dataCapacityBits","getNumDataCodewords","usedBits","getTotalBits","newEcl","Ecc","MEDIUM","QUARTILE","HIGH","bb","appendBits","mode","modeBits","numChars","numCharCountBits","b","getData","push","Math","min","length","padByte","dataCodewords","forEach","i","constructor","errorCorrectionLevel","msk","modules","isFunction","size","row","slice","drawFunctionPatterns","allCodewords","addEccAndInterleave","drawCodewords","minPenalty","applyMask","drawFormatBits","penalty","getPenaltyScore","getModule","x","y","setFunctionModule","drawFinderPattern","alignPatPos","getAlignmentPatternPositions","numAlign","j","drawAlignmentPattern","drawVersion","formatBits","rem","bits","getBit","color","a","floor","dy","dx","dist","max","abs","xx","yy","isDark","ver","numBlocks","NUM_ERROR_CORRECTION_BLOCKS","ordinal","blockEccLen","ECC_CODEWORDS_PER_BLOCK","rawCodewords","getNumRawDataModules","numShortBlocks","shortBlockLen","blocks","rsDiv","reedSolomonComputeDivisor","k","dat","ecc","reedSolomonComputeRemainder","concat","result","block","right","vert","upward","invert","Error","runColor","runX","runHistory","PENALTY_N1","finderPenaltyAddHistory","finderPenaltyCountPatterns","PENALTY_N3","finderPenaltyTerminateAndCount","runY","PENALTY_N2","dark","reduce","sum","total","ceil","PENALTY_N4","step","pos","splice","degree","root","reedSolomonMultiply","divisor","map","_","factor","shift","coef","z","n","core","currentRunColor","currentRunLength","pop","unshift","val","len","Mode","BYTE","makeNumeric","digits","isNumeric","parseInt","substr","NUMERIC","makeAlphanumeric","isAlphanumeric","temp","ALPHANUMERIC_CHARSET","indexOf","charAt","ALPHANUMERIC","toUtf8ByteArray","makeEci","assignVal","ECI","NUMERIC_REGEX","test","ALPHANUMERIC_REGEX","bitData","ccbits","Infinity","str","encodeURI","charCodeAt","LOW","numBitsCharCount","KANJI"],"sources":["/home/whw/Vue/whwtest.github.io/node_modules/naive-ui/es/qr-code/src/qrcodegen.js"],"sourcesContent":["/*\n * QR Code generator library (TypeScript)\n *\n * Copyright (c) Project Nayuki. (MIT License)\n * https://www.nayuki.io/page/qr-code-generator-library\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy of\n * this software and associated documentation files (the \"Software\"), to deal in\n * the Software without restriction, including without limitation the rights to\n * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n * the Software, and to permit persons to whom the Software is furnished to do so,\n * subject to the following conditions:\n * - The above copyright notice and this permission notice shall be included in\n *   all copies or substantial portions of the Software.\n * - The Software is provided \"as is\", without warranty of any kind, express or\n *   implied, including but not limited to the warranties of merchantability,\n *   fitness for a particular purpose and noninfringement. In no event shall the\n *   authors or copyright holders be liable for any claim, damages or other\n *   liability, whether in an action of contract, tort or otherwise, arising from,\n *   out of or in connection with the Software or the use or other dealings in the\n *   Software.\n */\n'use strict';\n// eslint-disable-next-line @typescript-eslint/no-namespace\nvar qrcodegen;\n(function (qrcodegen) {\n    /* ---- QR Code symbol class ---- */\n    /*\n     * A QR Code symbol, which is a type of two-dimension barcode.\n     * Invented by Denso Wave and described in the ISO/IEC 18004 standard.\n     * Instances of this class represent an immutable square grid of dark and light cells.\n     * The class provides static factory functions to create a QR Code from text or binary data.\n     * The class covers the QR Code Model 2 specification, supporting all versions (sizes)\n     * from 1 to 40, all 4 error correction levels, and 4 character encoding modes.\n     *\n     * Ways to create a QR Code object:\n     * - High level: Take the payload data and call QrCode.encodeText() or QrCode.encodeBinary().\n     * - Mid level: Custom-make the list of segments and call QrCode.encodeSegments().\n     * - Low level: Custom-make the array of data codeword bytes (including\n     *   segment headers and final padding, excluding error correction codewords),\n     *   supply the appropriate version number, and call the QrCode() constructor.\n     * (Note that all ways require supplying the desired error correction level.)\n     */\n    class QrCode {\n        /* -- Static factory functions (high level) -- */\n        // Returns a QR Code representing the given Unicode text string at the given error correction level.\n        // As a conservative upper bound, this function is guaranteed to succeed for strings that have 738 or fewer\n        // Unicode code points (not UTF-16 code units) if the low error correction level is used. The smallest possible\n        // QR Code version is automatically chosen for the output. The ECC level of the result may be higher than the\n        // ecl argument if it can be done without increasing the version.\n        static encodeText(text, ecl) {\n            const segs = qrcodegen.QrSegment.makeSegments(text);\n            return QrCode.encodeSegments(segs, ecl);\n        }\n        // Returns a QR Code representing the given binary data at the given error correction level.\n        // This function always encodes using the binary segment mode, not any text mode. The maximum number of\n        // bytes allowed is 2953. The smallest possible QR Code version is automatically chosen for the output.\n        // The ECC level of the result may be higher than the ecl argument if it can be done without increasing the version.\n        static encodeBinary(data, ecl) {\n            const seg = qrcodegen.QrSegment.makeBytes(data);\n            return QrCode.encodeSegments([seg], ecl);\n        }\n        /* -- Static factory functions (mid level) -- */\n        // Returns a QR Code representing the given segments with the given encoding parameters.\n        // The smallest possible QR Code version within the given range is automatically\n        // chosen for the output. Iff boostEcl is true, then the ECC level of the result\n        // may be higher than the ecl argument if it can be done without increasing the\n        // version. The mask number is either between 0 to 7 (inclusive) to force that\n        // mask, or -1 to automatically choose an appropriate mask (which may be slow).\n        // This function allows the user to create a custom sequence of segments that switches\n        // between modes (such as alphanumeric and byte) to encode text in less space.\n        // This is a mid-level API; the high-level API is encodeText() and encodeBinary().\n        static encodeSegments(segs, ecl, minVersion = 1, maxVersion = 40, mask = -1, boostEcl = true) {\n            if (!(QrCode.MIN_VERSION <= minVersion &&\n                minVersion <= maxVersion &&\n                maxVersion <= QrCode.MAX_VERSION) ||\n                mask < -1 ||\n                mask > 7) {\n                throw new RangeError('Invalid value');\n            }\n            // Find the minimal version number to use\n            let version;\n            let dataUsedBits;\n            for (version = minVersion;; version++) {\n                const dataCapacityBits = QrCode.getNumDataCodewords(version, ecl) * 8; // Number of data bits available\n                const usedBits = QrSegment.getTotalBits(segs, version);\n                if (usedBits <= dataCapacityBits) {\n                    dataUsedBits = usedBits;\n                    break; // This version number is found to be suitable\n                }\n                if (version >= maxVersion) {\n                    // All versions in the range could not fit the given data\n                    throw new RangeError('Data too long');\n                }\n            }\n            // Increase the error correction level while the data still fits in the current version number\n            for (const newEcl of [\n                QrCode.Ecc.MEDIUM,\n                QrCode.Ecc.QUARTILE,\n                QrCode.Ecc.HIGH\n            ]) {\n                // From low to high\n                if (boostEcl &&\n                    dataUsedBits <= QrCode.getNumDataCodewords(version, newEcl) * 8) {\n                    ecl = newEcl;\n                }\n            }\n            // Concatenate all segments to create the data bit string\n            const bb = [];\n            for (const seg of segs) {\n                appendBits(seg.mode.modeBits, 4, bb);\n                appendBits(seg.numChars, seg.mode.numCharCountBits(version), bb);\n                for (const b of seg.getData()) {\n                    bb.push(b);\n                }\n            }\n            // Add terminator and pad up to a byte if applicable\n            const dataCapacityBits = QrCode.getNumDataCodewords(version, ecl) * 8;\n            appendBits(0, Math.min(4, dataCapacityBits - bb.length), bb);\n            appendBits(0, (8 - (bb.length % 8)) % 8, bb);\n            // Pad with alternating bytes until data capacity is reached\n            for (let padByte = 0xec; bb.length < dataCapacityBits; padByte ^= 0xec ^ 0x11) {\n                appendBits(padByte, 8, bb);\n            }\n            // Pack bits into bytes in big endian\n            const dataCodewords = [];\n            while (dataCodewords.length * 8 < bb.length) {\n                dataCodewords.push(0);\n            }\n            bb.forEach((b, i) => (dataCodewords[i >>> 3] |= b << (7 - (i & 7))));\n            // Create the QR Code object\n            return new QrCode(version, ecl, dataCodewords, mask);\n        }\n        /* -- Constructor (low level) and fields -- */\n        // Creates a new QR Code with the given version number,\n        // error correction level, data codeword bytes, and mask number.\n        // This is a low-level API that most users should not use directly.\n        // A mid-level API is the encodeSegments() function.\n        constructor(\n        // The version number of this QR Code, which is between 1 and 40 (inclusive).\n        // This determines the size of this barcode.\n        version, \n        // The error correction level used in this QR Code.\n        errorCorrectionLevel, dataCodewords, msk) {\n            this.version = version;\n            this.errorCorrectionLevel = errorCorrectionLevel;\n            // The modules of this QR Code (false = light, true = dark).\n            // Immutable after constructor finishes. Accessed through getModule().\n            this.modules = [];\n            // Indicates function modules that are not subjected to masking. Discarded when constructor finishes.\n            this.isFunction = [];\n            // Check scalar arguments\n            if (version < QrCode.MIN_VERSION || version > QrCode.MAX_VERSION) {\n                throw new RangeError('Version value out of range');\n            }\n            if (msk < -1 || msk > 7) {\n                throw new RangeError('Mask value out of range');\n            }\n            this.size = version * 4 + 17;\n            // Initialize both grids to be size*size arrays of Boolean false\n            const row = [];\n            for (let i = 0; i < this.size; i++) {\n                row.push(false);\n            }\n            for (let i = 0; i < this.size; i++) {\n                this.modules.push(row.slice()); // Initially all light\n                this.isFunction.push(row.slice());\n            }\n            // Compute ECC, draw modules\n            this.drawFunctionPatterns();\n            const allCodewords = this.addEccAndInterleave(dataCodewords);\n            this.drawCodewords(allCodewords);\n            // Do masking\n            if (msk === -1) {\n                // Automatically choose best mask\n                let minPenalty = 1000000000;\n                for (let i = 0; i < 8; i++) {\n                    this.applyMask(i);\n                    this.drawFormatBits(i);\n                    const penalty = this.getPenaltyScore();\n                    if (penalty < minPenalty) {\n                        msk = i;\n                        minPenalty = penalty;\n                    }\n                    this.applyMask(i); // Undoes the mask due to XOR\n                }\n            }\n            this.mask = msk;\n            this.applyMask(msk); // Apply the final choice of mask\n            this.drawFormatBits(msk); // Overwrite old format bits\n            this.isFunction = [];\n        }\n        /* -- Accessor methods -- */\n        // Returns the color of the module (pixel) at the given coordinates, which is false\n        // for light or true for dark. The top left corner has the coordinates (x=0, y=0).\n        // If the given coordinates are out of bounds, then false (light) is returned.\n        getModule(x, y) {\n            return (x >= 0 && x < this.size && y >= 0 && y < this.size && this.modules[y][x]);\n        }\n        /* -- Private helper methods for constructor: Drawing function modules -- */\n        // Reads this object's version field, and draws and marks all function modules.\n        drawFunctionPatterns() {\n            // Draw horizontal and vertical timing patterns\n            for (let i = 0; i < this.size; i++) {\n                this.setFunctionModule(6, i, i % 2 === 0);\n                this.setFunctionModule(i, 6, i % 2 === 0);\n            }\n            // Draw 3 finder patterns (all corners except bottom right; overwrites some timing modules)\n            this.drawFinderPattern(3, 3);\n            this.drawFinderPattern(this.size - 4, 3);\n            this.drawFinderPattern(3, this.size - 4);\n            // Draw numerous alignment patterns\n            const alignPatPos = this.getAlignmentPatternPositions();\n            const numAlign = alignPatPos.length;\n            for (let i = 0; i < numAlign; i++) {\n                for (let j = 0; j < numAlign; j++) {\n                    // Don't draw on the three finder corners\n                    if (!((i === 0 && j === 0) ||\n                        (i === 0 && j === numAlign - 1) ||\n                        (i === numAlign - 1 && j === 0))) {\n                        this.drawAlignmentPattern(alignPatPos[i], alignPatPos[j]);\n                    }\n                }\n            }\n            // Draw configuration data\n            this.drawFormatBits(0); // Dummy mask value; overwritten later in the constructor\n            this.drawVersion();\n        }\n        // Draws two copies of the format bits (with its own error correction code)\n        // based on the given mask and this object's error correction level field.\n        drawFormatBits(mask) {\n            // Calculate error correction code and pack bits\n            const data = (this.errorCorrectionLevel.formatBits << 3) | mask; // errCorrLvl is uint2, mask is uint3\n            let rem = data;\n            for (let i = 0; i < 10; i++) {\n                rem = (rem << 1) ^ ((rem >>> 9) * 0x537);\n            }\n            const bits = ((data << 10) | rem) ^ 0x5412; // uint15\n            // Draw first copy\n            for (let i = 0; i <= 5; i++) {\n                this.setFunctionModule(8, i, getBit(bits, i));\n            }\n            this.setFunctionModule(8, 7, getBit(bits, 6));\n            this.setFunctionModule(8, 8, getBit(bits, 7));\n            this.setFunctionModule(7, 8, getBit(bits, 8));\n            for (let i = 9; i < 15; i++) {\n                this.setFunctionModule(14 - i, 8, getBit(bits, i));\n            }\n            // Draw second copy\n            for (let i = 0; i < 8; i++) {\n                this.setFunctionModule(this.size - 1 - i, 8, getBit(bits, i));\n            }\n            for (let i = 8; i < 15; i++) {\n                this.setFunctionModule(8, this.size - 15 + i, getBit(bits, i));\n            }\n            this.setFunctionModule(8, this.size - 8, true); // Always dark\n        }\n        // Draws two copies of the version bits (with its own error correction code),\n        // based on this object's version field, iff 7 <= version <= 40.\n        drawVersion() {\n            if (this.version < 7) {\n                return;\n            }\n            // Calculate error correction code and pack bits\n            let rem = this.version; // version is uint6, in the range [7, 40]\n            for (let i = 0; i < 12; i++) {\n                rem = (rem << 1) ^ ((rem >>> 11) * 0x1f25);\n            }\n            const bits = (this.version << 12) | rem; // uint18\n            // Draw two copies\n            for (let i = 0; i < 18; i++) {\n                const color = getBit(bits, i);\n                const a = this.size - 11 + (i % 3);\n                const b = Math.floor(i / 3);\n                this.setFunctionModule(a, b, color);\n                this.setFunctionModule(b, a, color);\n            }\n        }\n        // Draws a 9*9 finder pattern including the border separator,\n        // with the center module at (x, y). Modules can be out of bounds.\n        drawFinderPattern(x, y) {\n            for (let dy = -4; dy <= 4; dy++) {\n                for (let dx = -4; dx <= 4; dx++) {\n                    const dist = Math.max(Math.abs(dx), Math.abs(dy)); // Chebyshev/infinity norm\n                    const xx = x + dx;\n                    const yy = y + dy;\n                    if (xx >= 0 && xx < this.size && yy >= 0 && yy < this.size) {\n                        this.setFunctionModule(xx, yy, dist !== 2 && dist !== 4);\n                    }\n                }\n            }\n        }\n        // Draws a 5*5 alignment pattern, with the center module\n        // at (x, y). All modules must be in bounds.\n        drawAlignmentPattern(x, y) {\n            for (let dy = -2; dy <= 2; dy++) {\n                for (let dx = -2; dx <= 2; dx++) {\n                    this.setFunctionModule(x + dx, y + dy, Math.max(Math.abs(dx), Math.abs(dy)) !== 1);\n                }\n            }\n        }\n        // Sets the color of a module and marks it as a function module.\n        // Only used by the constructor. Coordinates must be in bounds.\n        setFunctionModule(x, y, isDark) {\n            this.modules[y][x] = isDark;\n            this.isFunction[y][x] = true;\n        }\n        /* -- Private helper methods for constructor: Codewords and masking -- */\n        // Returns a new byte string representing the given data with the appropriate error correction\n        // codewords appended to it, based on this object's version and error correction level.\n        addEccAndInterleave(data) {\n            const ver = this.version;\n            const ecl = this.errorCorrectionLevel;\n            if (data.length !== QrCode.getNumDataCodewords(ver, ecl)) {\n                throw new RangeError('Invalid argument');\n            }\n            // Calculate parameter numbers\n            const numBlocks = QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver];\n            const blockEccLen = QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver];\n            const rawCodewords = Math.floor(QrCode.getNumRawDataModules(ver) / 8);\n            const numShortBlocks = numBlocks - (rawCodewords % numBlocks);\n            const shortBlockLen = Math.floor(rawCodewords / numBlocks);\n            // Split data into blocks and append ECC to each block\n            const blocks = [];\n            const rsDiv = QrCode.reedSolomonComputeDivisor(blockEccLen);\n            for (let i = 0, k = 0; i < numBlocks; i++) {\n                const dat = data.slice(k, k + shortBlockLen - blockEccLen + (i < numShortBlocks ? 0 : 1));\n                k += dat.length;\n                const ecc = QrCode.reedSolomonComputeRemainder(dat, rsDiv);\n                if (i < numShortBlocks) {\n                    dat.push(0);\n                }\n                blocks.push(dat.concat(ecc));\n            }\n            // Interleave (not concatenate) the bytes from every block into a single sequence\n            const result = [];\n            for (let i = 0; i < blocks[0].length; i++) {\n                blocks.forEach((block, j) => {\n                    // Skip the padding byte in short blocks\n                    if (i !== shortBlockLen - blockEccLen || j >= numShortBlocks) {\n                        result.push(block[i]);\n                    }\n                });\n            }\n            return result;\n        }\n        // Draws the given sequence of 8-bit codewords (data and error correction) onto the entire\n        // data area of this QR Code. Function modules need to be marked off before this is called.\n        drawCodewords(data) {\n            if (data.length !==\n                Math.floor(QrCode.getNumRawDataModules(this.version) / 8)) {\n                throw new RangeError('Invalid argument');\n            }\n            let i = 0; // Bit index into the data\n            // Do the funny zigzag scan\n            for (let right = this.size - 1; right >= 1; right -= 2) {\n                // Index of right column in each column pair\n                if (right === 6) {\n                    right = 5;\n                }\n                for (let vert = 0; vert < this.size; vert++) {\n                    // Vertical counter\n                    for (let j = 0; j < 2; j++) {\n                        const x = right - j; // Actual x coordinate\n                        const upward = ((right + 1) & 2) === 0;\n                        const y = upward ? this.size - 1 - vert : vert; // Actual y coordinate\n                        if (!this.isFunction[y][x] && i < data.length * 8) {\n                            this.modules[y][x] = getBit(data[i >>> 3], 7 - (i & 7));\n                            i++;\n                        }\n                        // If this QR Code has any remainder bits (0 to 7), they were assigned as\n                        // 0/false/light by the constructor and are left unchanged by this method\n                    }\n                }\n            }\n        }\n        // XORs the codeword modules in this QR Code with the given mask pattern.\n        // The function modules must be marked and the codeword bits must be drawn\n        // before masking. Due to the arithmetic of XOR, calling applyMask() with\n        // the same mask value a second time will undo the mask. A final well-formed\n        // QR Code needs exactly one (not zero, two, etc.) mask applied.\n        applyMask(mask) {\n            if (mask < 0 || mask > 7) {\n                throw new RangeError('Mask value out of range');\n            }\n            for (let y = 0; y < this.size; y++) {\n                for (let x = 0; x < this.size; x++) {\n                    let invert;\n                    switch (mask) {\n                        case 0:\n                            invert = (x + y) % 2 === 0;\n                            break;\n                        case 1:\n                            invert = y % 2 === 0;\n                            break;\n                        case 2:\n                            invert = x % 3 === 0;\n                            break;\n                        case 3:\n                            invert = (x + y) % 3 === 0;\n                            break;\n                        case 4:\n                            invert = (Math.floor(x / 3) + Math.floor(y / 2)) % 2 === 0;\n                            break;\n                        case 5:\n                            invert = ((x * y) % 2) + ((x * y) % 3) === 0;\n                            break;\n                        case 6:\n                            invert = (((x * y) % 2) + ((x * y) % 3)) % 2 === 0;\n                            break;\n                        case 7:\n                            invert = (((x + y) % 2) + ((x * y) % 3)) % 2 === 0;\n                            break;\n                        default:\n                            throw new Error('Unreachable');\n                    }\n                    if (!this.isFunction[y][x] && invert) {\n                        this.modules[y][x] = !this.modules[y][x];\n                    }\n                }\n            }\n        }\n        // Calculates and returns the penalty score based on state of this QR Code's current modules.\n        // This is used by the automatic mask choice algorithm to find the mask pattern that yields the lowest score.\n        getPenaltyScore() {\n            let result = 0;\n            // Adjacent modules in row having same color, and finder-like patterns\n            for (let y = 0; y < this.size; y++) {\n                let runColor = false;\n                let runX = 0;\n                const runHistory = [0, 0, 0, 0, 0, 0, 0];\n                for (let x = 0; x < this.size; x++) {\n                    if (this.modules[y][x] === runColor) {\n                        runX++;\n                        if (runX === 5) {\n                            result += QrCode.PENALTY_N1;\n                        }\n                        else if (runX > 5) {\n                            result++;\n                        }\n                    }\n                    else {\n                        this.finderPenaltyAddHistory(runX, runHistory);\n                        if (!runColor) {\n                            result +=\n                                this.finderPenaltyCountPatterns(runHistory) * QrCode.PENALTY_N3;\n                        }\n                        runColor = this.modules[y][x];\n                        runX = 1;\n                    }\n                }\n                result +=\n                    this.finderPenaltyTerminateAndCount(runColor, runX, runHistory) *\n                        QrCode.PENALTY_N3;\n            }\n            // Adjacent modules in column having same color, and finder-like patterns\n            for (let x = 0; x < this.size; x++) {\n                let runColor = false;\n                let runY = 0;\n                const runHistory = [0, 0, 0, 0, 0, 0, 0];\n                for (let y = 0; y < this.size; y++) {\n                    if (this.modules[y][x] === runColor) {\n                        runY++;\n                        if (runY === 5) {\n                            result += QrCode.PENALTY_N1;\n                        }\n                        else if (runY > 5) {\n                            result++;\n                        }\n                    }\n                    else {\n                        this.finderPenaltyAddHistory(runY, runHistory);\n                        if (!runColor) {\n                            result +=\n                                this.finderPenaltyCountPatterns(runHistory) * QrCode.PENALTY_N3;\n                        }\n                        runColor = this.modules[y][x];\n                        runY = 1;\n                    }\n                }\n                result +=\n                    this.finderPenaltyTerminateAndCount(runColor, runY, runHistory) *\n                        QrCode.PENALTY_N3;\n            }\n            // 2*2 blocks of modules having same color\n            for (let y = 0; y < this.size - 1; y++) {\n                for (let x = 0; x < this.size - 1; x++) {\n                    const color = this.modules[y][x];\n                    if (color === this.modules[y][x + 1] &&\n                        color === this.modules[y + 1][x] &&\n                        color === this.modules[y + 1][x + 1]) {\n                        result += QrCode.PENALTY_N2;\n                    }\n                }\n            }\n            // Balance of dark and light modules\n            let dark = 0;\n            for (const row of this.modules) {\n                dark = row.reduce((sum, color) => sum + (color ? 1 : 0), dark);\n            }\n            const total = this.size * this.size; // Note that size is odd, so dark/total != 1/2\n            // Compute the smallest integer k >= 0 such that (45-5k)% <= dark/total <= (55+5k)%\n            const k = Math.ceil(Math.abs(dark * 20 - total * 10) / total) - 1;\n            result += k * QrCode.PENALTY_N4;\n            return result;\n        }\n        /* -- Private helper functions -- */\n        // Returns an ascending list of positions of alignment patterns for this version number.\n        // Each position is in the range [0,177), and are used on both the x and y axes.\n        // This could be implemented as lookup table of 40 variable-length lists of integers.\n        getAlignmentPatternPositions() {\n            if (this.version === 1) {\n                return [];\n            }\n            else {\n                const numAlign = Math.floor(this.version / 7) + 2;\n                const step = this.version === 32\n                    ? 26\n                    : Math.ceil((this.version * 4 + 4) / (numAlign * 2 - 2)) * 2;\n                const result = [6];\n                for (let pos = this.size - 7; result.length < numAlign; pos -= step) {\n                    result.splice(1, 0, pos);\n                }\n                return result;\n            }\n        }\n        // Returns the number of data bits that can be stored in a QR Code of the given version number, after\n        // all function modules are excluded. This includes remainder bits, so it might not be a multiple of 8.\n        // The result is in the range [208, 29648]. This could be implemented as a 40-entry lookup table.\n        static getNumRawDataModules(ver) {\n            if (ver < QrCode.MIN_VERSION || ver > QrCode.MAX_VERSION) {\n                throw new RangeError('Version number out of range');\n            }\n            let result = (16 * ver + 128) * ver + 64;\n            if (ver >= 2) {\n                const numAlign = Math.floor(ver / 7) + 2;\n                result -= (25 * numAlign - 10) * numAlign - 55;\n                if (ver >= 7) {\n                    result -= 36;\n                }\n            }\n            return result;\n        }\n        // Returns the number of 8-bit data (i.e. not error correction) codewords contained in any\n        // QR Code of the given version number and error correction level, with remainder bits discarded.\n        // This stateless pure function could be implemented as a (40*4)-cell lookup table.\n        static getNumDataCodewords(ver, ecl) {\n            return (Math.floor(QrCode.getNumRawDataModules(ver) / 8) -\n                QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver] *\n                    QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver]);\n        }\n        // Returns a Reed-Solomon ECC generator polynomial for the given degree. This could be\n        // implemented as a lookup table over all possible parameter values, instead of as an algorithm.\n        static reedSolomonComputeDivisor(degree) {\n            if (degree < 1 || degree > 255) {\n                throw new RangeError('Degree out of range');\n            }\n            // Polynomial coefficients are stored from highest to lowest power, excluding the leading term which is always 1.\n            // For example the polynomial x^3 + 255x^2 + 8x + 93 is stored as the uint8 array [255, 8, 93].\n            const result = [];\n            for (let i = 0; i < degree - 1; i++) {\n                result.push(0);\n            }\n            result.push(1); // Start off with the monomial x^0\n            // Compute the product polynomial (x - r^0) * (x - r^1) * (x - r^2) * ... * (x - r^{degree-1}),\n            // and drop the highest monomial term which is always 1x^degree.\n            // Note that r = 0x02, which is a generator element of this field GF(2^8/0x11D).\n            let root = 1;\n            for (let i = 0; i < degree; i++) {\n                // Multiply the current product by (x - r^i)\n                for (let j = 0; j < result.length; j++) {\n                    result[j] = QrCode.reedSolomonMultiply(result[j], root);\n                    if (j + 1 < result.length) {\n                        result[j] ^= result[j + 1];\n                    }\n                }\n                root = QrCode.reedSolomonMultiply(root, 0x02);\n            }\n            return result;\n        }\n        // Returns the Reed-Solomon error correction codeword for the given data and divisor polynomials.\n        static reedSolomonComputeRemainder(data, divisor) {\n            const result = divisor.map((_) => 0);\n            for (const b of data) {\n                // Polynomial division\n                // eslint-disable-next-line @typescript-eslint/non-nullable-type-assertion-style\n                const factor = b ^ result.shift();\n                result.push(0);\n                divisor.forEach((coef, i) => (result[i] ^= QrCode.reedSolomonMultiply(coef, factor)));\n            }\n            return result;\n        }\n        // Returns the product of the two given field elements modulo GF(2^8/0x11D). The arguments and result\n        // are unsigned 8-bit integers. This could be implemented as a lookup table of 256*256 entries of uint8.\n        static reedSolomonMultiply(x, y) {\n            if (x >>> 8 !== 0 || y >>> 8 !== 0) {\n                throw new RangeError('Byte out of range');\n            }\n            // Russian peasant multiplication\n            let z = 0;\n            for (let i = 7; i >= 0; i--) {\n                z = (z << 1) ^ ((z >>> 7) * 0x11d);\n                z ^= ((y >>> i) & 1) * x;\n            }\n            return z;\n        }\n        // Can only be called immediately after a light run is added, and\n        // returns either 0, 1, or 2. A helper function for getPenaltyScore().\n        finderPenaltyCountPatterns(runHistory) {\n            const n = runHistory[1];\n            const core = n > 0 &&\n                runHistory[2] === n &&\n                runHistory[3] === n * 3 &&\n                runHistory[4] === n &&\n                runHistory[5] === n;\n            return ((core && runHistory[0] >= n * 4 && runHistory[6] >= n ? 1 : 0) +\n                (core && runHistory[6] >= n * 4 && runHistory[0] >= n ? 1 : 0));\n        }\n        // Must be called at the end of a line (row or column) of modules. A helper function for getPenaltyScore().\n        finderPenaltyTerminateAndCount(currentRunColor, currentRunLength, runHistory) {\n            if (currentRunColor) {\n                // Terminate dark run\n                this.finderPenaltyAddHistory(currentRunLength, runHistory);\n                currentRunLength = 0;\n            }\n            currentRunLength += this.size; // Add light border to final run\n            this.finderPenaltyAddHistory(currentRunLength, runHistory);\n            return this.finderPenaltyCountPatterns(runHistory);\n        }\n        // Pushes the given value to the front and drops the last value. A helper function for getPenaltyScore().\n        finderPenaltyAddHistory(currentRunLength, runHistory) {\n            if (runHistory[0] === 0) {\n                currentRunLength += this.size;\n            } // Add light border to initial run\n            runHistory.pop();\n            runHistory.unshift(currentRunLength);\n        }\n    }\n    /* -- Constants and tables -- */\n    // The minimum version number supported in the QR Code Model 2 standard.\n    QrCode.MIN_VERSION = 1;\n    // The maximum version number supported in the QR Code Model 2 standard.\n    QrCode.MAX_VERSION = 40;\n    // For use in getPenaltyScore(), when evaluating which mask is best.\n    QrCode.PENALTY_N1 = 3;\n    QrCode.PENALTY_N2 = 3;\n    QrCode.PENALTY_N3 = 40;\n    QrCode.PENALTY_N4 = 10;\n    QrCode.ECC_CODEWORDS_PER_BLOCK = [\n        // Version: (note that index 0 is for padding, and is set to an illegal value)\n        // 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40    Error correction level\n        [\n            -1, 7, 10, 15, 20, 26, 18, 20, 24, 30, 18, 20, 24, 26, 30, 22, 24, 28,\n            30, 28, 28, 28, 28, 30, 30, 26, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30,\n            30, 30, 30, 30, 30\n        ], // Low\n        [\n            -1, 10, 16, 26, 18, 24, 16, 18, 22, 22, 26, 30, 22, 22, 24, 24, 28, 28,\n            26, 26, 26, 26, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28,\n            28, 28, 28, 28, 28\n        ], // Medium\n        [\n            -1, 13, 22, 18, 26, 18, 24, 18, 22, 20, 24, 28, 26, 24, 20, 30, 24, 28,\n            28, 26, 30, 28, 30, 30, 30, 30, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30,\n            30, 30, 30, 30, 30\n        ], // Quartile\n        [\n            -1, 17, 28, 22, 16, 22, 28, 26, 26, 24, 28, 24, 28, 22, 24, 24, 30, 28,\n            28, 26, 28, 30, 24, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,\n            30, 30, 30, 30, 30\n        ] // High\n    ];\n    QrCode.NUM_ERROR_CORRECTION_BLOCKS = [\n        // Version: (note that index 0 is for padding, and is set to an illegal value)\n        // 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40    Error correction level\n        [\n            -1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 4, 6, 6, 6, 6, 7, 8, 8, 9, 9,\n            10, 12, 12, 12, 13, 14, 15, 16, 17, 18, 19, 19, 20, 21, 22, 24, 25\n        ], // Low\n        [\n            -1, 1, 1, 1, 2, 2, 4, 4, 4, 5, 5, 5, 8, 9, 9, 10, 10, 11, 13, 14, 16,\n            17, 17, 18, 20, 21, 23, 25, 26, 28, 29, 31, 33, 35, 37, 38, 40, 43, 45,\n            47, 49\n        ], // Medium\n        [\n            -1, 1, 1, 2, 2, 4, 4, 6, 6, 8, 8, 8, 10, 12, 16, 12, 17, 16, 18, 21, 20,\n            23, 23, 25, 27, 29, 34, 34, 35, 38, 40, 43, 45, 48, 51, 53, 56, 59, 62,\n            65, 68\n        ], // Quartile\n        [\n            -1, 1, 1, 2, 4, 4, 4, 5, 6, 8, 8, 11, 11, 16, 16, 18, 16, 19, 21, 25,\n            25, 25, 34, 30, 32, 35, 37, 40, 42, 45, 48, 51, 54, 57, 60, 63, 66, 70,\n            74, 77, 81\n        ] // High\n    ];\n    qrcodegen.QrCode = QrCode;\n    // Appends the given number of low-order bits of the given value\n    // to the given buffer. Requires 0 <= len <= 31 and 0 <= val < 2^len.\n    function appendBits(val, len, bb) {\n        if (len < 0 || len > 31 || val >>> len !== 0) {\n            throw new RangeError('Value out of range');\n        }\n        for (let i = len - 1; i >= 0; i-- // Append bit by bit\n        ) {\n            bb.push((val >>> i) & 1);\n        }\n    }\n    // Returns true iff the i'th bit of x is set to 1.\n    function getBit(x, i) {\n        return ((x >>> i) & 1) !== 0;\n    }\n    /* ---- Data segment class ---- */\n    /*\n     * A segment of character/binary/control data in a QR Code symbol.\n     * Instances of this class are immutable.\n     * The mid-level way to create a segment is to take the payload data\n     * and call a static factory function such as QrSegment.makeNumeric().\n     * The low-level way to create a segment is to custom-make the bit buffer\n     * and call the QrSegment() constructor with appropriate values.\n     * This segment class imposes no length restrictions, but QR Codes have restrictions.\n     * Even in the most favorable conditions, a QR Code can only hold 7089 characters of data.\n     * Any segment longer than this is meaningless for the purpose of generating QR Codes.\n     */\n    class QrSegment {\n        /* -- Static factory functions (mid level) -- */\n        // Returns a segment representing the given binary data encoded in\n        // byte mode. All input byte arrays are acceptable. Any text string\n        // can be converted to UTF-8 bytes and encoded as a byte mode segment.\n        static makeBytes(data) {\n            const bb = [];\n            for (const b of data) {\n                appendBits(b, 8, bb);\n            }\n            return new QrSegment(QrSegment.Mode.BYTE, data.length, bb);\n        }\n        // Returns a segment representing the given string of decimal digits encoded in numeric mode.\n        static makeNumeric(digits) {\n            if (!QrSegment.isNumeric(digits)) {\n                throw new RangeError('String contains non-numeric characters');\n            }\n            const bb = [];\n            for (let i = 0; i < digits.length;) {\n                // Consume up to 3 digits per iteration\n                const n = Math.min(digits.length - i, 3);\n                appendBits(parseInt(digits.substr(i, n), 10), n * 3 + 1, bb);\n                i += n;\n            }\n            return new QrSegment(QrSegment.Mode.NUMERIC, digits.length, bb);\n        }\n        // Returns a segment representing the given text string encoded in alphanumeric mode.\n        // The characters allowed are: 0 to 9, A to Z (uppercase only), space,\n        // dollar, percent, asterisk, plus, hyphen, period, slash, colon.\n        static makeAlphanumeric(text) {\n            if (!QrSegment.isAlphanumeric(text)) {\n                throw new RangeError('String contains unencodable characters in alphanumeric mode');\n            }\n            const bb = [];\n            let i;\n            for (i = 0; i + 2 <= text.length; i += 2) {\n                // Process groups of 2\n                let temp = QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)) * 45;\n                temp += QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i + 1));\n                appendBits(temp, 11, bb);\n            }\n            if (i < text.length) {\n                // 1 character remaining\n                appendBits(QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)), 6, bb);\n            }\n            return new QrSegment(QrSegment.Mode.ALPHANUMERIC, text.length, bb);\n        }\n        // Returns a new mutable list of zero or more segments to represent the given Unicode text string.\n        // The result may use various segment modes and switch modes to optimize the length of the bit stream.\n        static makeSegments(text) {\n            // Select the most efficient segment encoding automatically\n            if (text === '') {\n                return [];\n            }\n            else if (QrSegment.isNumeric(text)) {\n                return [QrSegment.makeNumeric(text)];\n            }\n            else if (QrSegment.isAlphanumeric(text)) {\n                return [QrSegment.makeAlphanumeric(text)];\n            }\n            else {\n                return [QrSegment.makeBytes(QrSegment.toUtf8ByteArray(text))];\n            }\n        }\n        // Returns a segment representing an Extended Channel Interpretation\n        // (ECI) designator with the given assignment value.\n        static makeEci(assignVal) {\n            const bb = [];\n            if (assignVal < 0) {\n                throw new RangeError('ECI assignment value out of range');\n            }\n            else if (assignVal < 1 << 7) {\n                appendBits(assignVal, 8, bb);\n            }\n            else if (assignVal < 1 << 14) {\n                appendBits(0b10, 2, bb);\n                appendBits(assignVal, 14, bb);\n            }\n            else if (assignVal < 1000000) {\n                appendBits(0b110, 3, bb);\n                appendBits(assignVal, 21, bb);\n            }\n            else {\n                throw new RangeError('ECI assignment value out of range');\n            }\n            return new QrSegment(QrSegment.Mode.ECI, 0, bb);\n        }\n        // Tests whether the given string can be encoded as a segment in numeric mode.\n        // A string is encodable iff each character is in the range 0 to 9.\n        static isNumeric(text) {\n            return QrSegment.NUMERIC_REGEX.test(text);\n        }\n        // Tests whether the given string can be encoded as a segment in alphanumeric mode.\n        // A string is encodable iff each character is in the following set: 0 to 9, A to Z\n        // (uppercase only), space, dollar, percent, asterisk, plus, hyphen, period, slash, colon.\n        static isAlphanumeric(text) {\n            return QrSegment.ALPHANUMERIC_REGEX.test(text);\n        }\n        /* -- Constructor (low level) and fields -- */\n        // Creates a new QR Code segment with the given attributes and data.\n        // The character count (numChars) must agree with the mode and the bit buffer length,\n        // but the constraint isn't checked. The given bit buffer is cloned and stored.\n        constructor(\n        // The mode indicator of this segment.\n        mode, \n        // The length of this segment's unencoded data. Measured in characters for\n        // numeric/alphanumeric/kanji mode, bytes for byte mode, and 0 for ECI mode.\n        // Always zero or positive. Not the same as the data's bit length.\n        numChars, \n        // The data bits of this segment. Accessed through getData().\n        bitData) {\n            this.mode = mode;\n            this.numChars = numChars;\n            this.bitData = bitData;\n            if (numChars < 0) {\n                throw new RangeError('Invalid argument');\n            }\n            this.bitData = bitData.slice(); // Make defensive copy\n        }\n        /* -- Methods -- */\n        // Returns a new copy of the data bits of this segment.\n        getData() {\n            return this.bitData.slice(); // Make defensive copy\n        }\n        // (Package-private) Calculates and returns the number of bits needed to encode the given segments at\n        // the given version. The result is infinity if a segment has too many characters to fit its length field.\n        static getTotalBits(segs, version) {\n            let result = 0;\n            for (const seg of segs) {\n                const ccbits = seg.mode.numCharCountBits(version);\n                if (seg.numChars >= 1 << ccbits) {\n                    return Infinity;\n                } // The segment's length doesn't fit the field's bit width\n                result += 4 + ccbits + seg.bitData.length;\n            }\n            return result;\n        }\n        // Returns a new array of bytes representing the given string encoded in UTF-8.\n        static toUtf8ByteArray(str) {\n            str = encodeURI(str);\n            const result = [];\n            for (let i = 0; i < str.length; i++) {\n                if (str.charAt(i) !== '%') {\n                    result.push(str.charCodeAt(i));\n                }\n                else {\n                    result.push(parseInt(str.substr(i + 1, 2), 16));\n                    i += 2;\n                }\n            }\n            return result;\n        }\n    }\n    /* -- Constants -- */\n    // Describes precisely all strings that are encodable in numeric mode.\n    QrSegment.NUMERIC_REGEX = /^[0-9]*$/;\n    // Describes precisely all strings that are encodable in alphanumeric mode.\n    QrSegment.ALPHANUMERIC_REGEX = /^[A-Z0-9 $%*+./:-]*$/;\n    // The set of all legal characters in alphanumeric mode,\n    // where each character value maps to the index in the string.\n    QrSegment.ALPHANUMERIC_CHARSET = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:';\n    qrcodegen.QrSegment = QrSegment;\n})(qrcodegen || (qrcodegen = {}));\n/* ---- Public helper enumeration ---- */\n// eslint-disable-next-line @typescript-eslint/no-namespace\n(function (qrcodegen) {\n    var QrCode;\n    (function (QrCode) {\n        /*\n         * The error correction level in a QR Code symbol. Immutable.\n         */\n        class Ecc {\n            /* -- Constructor and fields -- */\n            constructor(\n            // In the range 0 to 3 (unsigned 2-bit integer).\n            ordinal, \n            // (Package-private) In the range 0 to 3 (unsigned 2-bit integer).\n            formatBits) {\n                this.ordinal = ordinal;\n                this.formatBits = formatBits;\n            }\n        }\n        /* -- Constants -- */\n        Ecc.LOW = new Ecc(0, 1); // The QR Code can tolerate about  7% erroneous codewords\n        Ecc.MEDIUM = new Ecc(1, 0); // The QR Code can tolerate about 15% erroneous codewords\n        Ecc.QUARTILE = new Ecc(2, 3); // The QR Code can tolerate about 25% erroneous codewords\n        Ecc.HIGH = new Ecc(3, 2); // The QR Code can tolerate about 30% erroneous codewords\n        QrCode.Ecc = Ecc;\n    })(QrCode = qrcodegen.QrCode || (qrcodegen.QrCode = {}));\n})(qrcodegen || (qrcodegen = {}));\n/* ---- Public helper enumeration ---- */\n// eslint-disable-next-line @typescript-eslint/no-namespace\n(function (qrcodegen) {\n    var QrSegment;\n    (function (QrSegment) {\n        /*\n         * Describes how a segment's data bits are interpreted. Immutable.\n         */\n        class Mode {\n            /* -- Constructor and fields -- */\n            constructor(\n            // The mode indicator bits, which is a uint4 value (range 0 to 15).\n            modeBits, \n            // Number of character count bits for three different version ranges.\n            numBitsCharCount) {\n                this.modeBits = modeBits;\n                this.numBitsCharCount = numBitsCharCount;\n            }\n            /* -- Method -- */\n            // (Package-private) Returns the bit width of the character count field for a segment in\n            // this mode in a QR Code at the given version number. The result is in the range [0, 16].\n            numCharCountBits(ver) {\n                return this.numBitsCharCount[Math.floor((ver + 7) / 17)];\n            }\n        }\n        /* -- Constants -- */\n        Mode.NUMERIC = new Mode(0x1, [10, 12, 14]);\n        Mode.ALPHANUMERIC = new Mode(0x2, [9, 11, 13]);\n        Mode.BYTE = new Mode(0x4, [8, 16, 16]);\n        Mode.KANJI = new Mode(0x8, [8, 10, 12]);\n        Mode.ECI = new Mode(0x7, [0, 0, 0]);\n        QrSegment.Mode = Mode;\n    })(QrSegment = qrcodegen.QrSegment || (qrcodegen.QrSegment = {}));\n})(qrcodegen || (qrcodegen = {}));\nexport default qrcodegen;\n"],"mappings":"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AE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EACtE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CACrB;EAAE;EACH,CACI,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EACtE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EACtE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CACrB;EAAE;EACH,CACI,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EACtE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EACtE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CACrB;EAAE;EACH,CACI,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { h, inject, computed, defineComponent, ref, onMounted } from 'vue';\nimport { useMemo } from 'vooks';\nimport { happensIn, repeat } from 'seemly';\nimport { createDataKey } from '../../_utils';\nimport NTreeNodeSwitcher from './TreeNodeSwitcher';\nimport NTreeNodeCheckbox from './TreeNodeCheckbox';\nimport NTreeNodeContent from './TreeNodeContent';\nimport { treeInjectionKey } from './interface';\nimport { renderDropMark } from './dnd';\nimport { isNodeDisabled } from './utils';\nconst TreeNode = defineComponent({\n  name: 'TreeNode',\n  props: {\n    clsPrefix: {\n      type: String,\n      required: true\n    },\n    tmNode: {\n      type: Object,\n      required: true\n    }\n  },\n  setup(props) {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const NTree = inject(treeInjectionKey);\n    const {\n      droppingNodeParentRef,\n      droppingMouseNodeRef,\n      draggingNodeRef,\n      droppingPositionRef,\n      droppingOffsetLevelRef,\n      nodePropsRef,\n      indentRef,\n      blockLineRef,\n      checkboxPlacementRef,\n      checkOnClickRef,\n      disabledFieldRef,\n      showLineRef,\n      renderSwitcherIconRef\n    } = NTree;\n    const checkboxDisabledRef = useMemo(() => !!props.tmNode.rawNode.checkboxDisabled);\n    const nodeIsDisabledRef = useMemo(() => {\n      return isNodeDisabled(props.tmNode, disabledFieldRef.value);\n    });\n    const disabledRef = useMemo(() => NTree.disabledRef.value || nodeIsDisabledRef.value);\n    const resolvedNodePropsRef = computed(() => {\n      const {\n        value: nodeProps\n      } = nodePropsRef;\n      if (!nodeProps) return undefined;\n      return nodeProps({\n        option: props.tmNode.rawNode\n      });\n    });\n    // used for drag and drop\n    const contentInstRef = ref(null);\n    // must be non-reactive\n    const contentElRef = {\n      value: null\n    };\n    onMounted(() => {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      contentElRef.value = contentInstRef.value.$el;\n    });\n    function handleSwitcherClick() {\n      const callback = () => {\n        const {\n          tmNode\n        } = props;\n        if (!tmNode.isLeaf && !tmNode.shallowLoaded) {\n          if (!NTree.loadingKeysRef.value.has(tmNode.key)) {\n            NTree.loadingKeysRef.value.add(tmNode.key);\n          } else {\n            return;\n          }\n          const {\n            onLoadRef: {\n              value: onLoad\n            }\n          } = NTree;\n          if (onLoad) {\n            void onLoad(tmNode.rawNode).then(value => {\n              if (value !== false) {\n                NTree.handleSwitcherClick(tmNode);\n              }\n            }).finally(() => {\n              NTree.loadingKeysRef.value.delete(tmNode.key);\n            });\n          }\n        } else {\n          NTree.handleSwitcherClick(tmNode);\n        }\n      };\n      if (renderSwitcherIconRef.value) {\n        // if renderSwitcherIcon is set, icon dom may be altered before event\n        // bubbles to parent dom, so that target check fails. Call it in next\n        // event loop so that event bubble phase is finishes.\n        setTimeout(callback, 0);\n      } else {\n        callback();\n      }\n    }\n    const selectableRef = useMemo(() => !nodeIsDisabledRef.value && NTree.selectableRef.value && (NTree.internalTreeSelect ? NTree.mergedCheckStrategyRef.value !== 'child' || NTree.multipleRef.value && NTree.cascadeRef.value || props.tmNode.isLeaf : true));\n    const checkableRef = useMemo(() => NTree.checkableRef.value && (NTree.cascadeRef.value || NTree.mergedCheckStrategyRef.value !== 'child' || props.tmNode.isLeaf));\n    const checkedRef = useMemo(() => NTree.displayedCheckedKeysRef.value.includes(props.tmNode.key));\n    const mergedCheckOnClickRef = useMemo(() => {\n      const {\n        value: checkable\n      } = checkableRef;\n      if (!checkable) return false;\n      const {\n        value: checkOnClick\n      } = checkOnClickRef;\n      const {\n        tmNode\n      } = props;\n      if (typeof checkOnClick === 'boolean') {\n        return !tmNode.disabled && checkOnClick;\n      }\n      return checkOnClick(props.tmNode.rawNode);\n    });\n    function _handleClick(e) {\n      const {\n        value: expandOnClick\n      } = NTree.expandOnClickRef;\n      const {\n        value: selectable\n      } = selectableRef;\n      const {\n        value: mergedCheckOnClick\n      } = mergedCheckOnClickRef;\n      if (!selectable && !expandOnClick && !mergedCheckOnClick) return;\n      if (happensIn(e, 'checkbox') || happensIn(e, 'switcher')) return;\n      const {\n        tmNode\n      } = props;\n      if (selectable) {\n        NTree.handleSelect(tmNode);\n      }\n      if (expandOnClick && !tmNode.isLeaf) {\n        handleSwitcherClick();\n      }\n      if (mergedCheckOnClick) {\n        handleCheck(!checkedRef.value);\n      }\n    }\n    function handleContentClick(e) {\n      var _a, _b;\n      if (blockLineRef.value) return;\n      if (!disabledRef.value) _handleClick(e);\n      (_b = (_a = resolvedNodePropsRef.value) === null || _a === void 0 ? void 0 : _a.onClick) === null || _b === void 0 ? void 0 : _b.call(_a, e);\n    }\n    function handleLineClick(e) {\n      var _a, _b;\n      if (!blockLineRef.value) return;\n      if (!disabledRef.value) {\n        _handleClick(e);\n      }\n      (_b = (_a = resolvedNodePropsRef.value) === null || _a === void 0 ? void 0 : _a.onClick) === null || _b === void 0 ? void 0 : _b.call(_a, e);\n    }\n    function handleCheck(checked) {\n      NTree.handleCheck(props.tmNode, checked);\n    }\n    // Dnd\n    function handleDragStart(e) {\n      NTree.handleDragStart({\n        event: e,\n        node: props.tmNode\n      });\n    }\n    function handleDragEnter(e) {\n      if (e.currentTarget !== e.target) {\n        return;\n      }\n      NTree.handleDragEnter({\n        event: e,\n        node: props.tmNode\n      });\n    }\n    function handleDragOver(e) {\n      e.preventDefault(); // if not prevent, drop event won't be fired...\n      NTree.handleDragOver({\n        event: e,\n        node: props.tmNode\n      });\n    }\n    function handleDragEnd(e) {\n      NTree.handleDragEnd({\n        event: e,\n        node: props.tmNode\n      });\n    }\n    function handleDragLeave(e) {\n      if (e.currentTarget !== e.target) {\n        return;\n      }\n      NTree.handleDragLeave({\n        event: e,\n        node: props.tmNode\n      });\n    }\n    function handleDrop(e) {\n      e.preventDefault();\n      if (droppingPositionRef.value !== null) {\n        NTree.handleDrop({\n          event: e,\n          node: props.tmNode,\n          dropPosition: droppingPositionRef.value\n        });\n      }\n    }\n    const indentNodes = computed(() => {\n      const {\n        clsPrefix\n      } = props;\n      const {\n        value: indent\n      } = indentRef;\n      if (showLineRef.value) {\n        const indentNodes = [];\n        let cursor = props.tmNode.parent;\n        while (cursor) {\n          if (cursor.isLastChild) {\n            indentNodes.push(h(\"div\", {\n              class: `${clsPrefix}-tree-node-indent`\n            }, h(\"div\", {\n              style: {\n                width: `${indent}px`\n              }\n            })));\n          } else {\n            indentNodes.push(h(\"div\", {\n              class: [`${clsPrefix}-tree-node-indent`, `${clsPrefix}-tree-node-indent--show-line`]\n            }, h(\"div\", {\n              style: {\n                width: `${indent}px`\n              }\n            })));\n          }\n          cursor = cursor.parent;\n        }\n        return indentNodes.reverse();\n      } else {\n        return repeat(props.tmNode.level, h(\"div\", {\n          class: `${props.clsPrefix}-tree-node-indent`\n        }, h(\"div\", {\n          style: {\n            width: `${indent}px`\n          }\n        })));\n      }\n    });\n    return {\n      showDropMark: useMemo(() => {\n        const {\n          value: draggingNode\n        } = draggingNodeRef;\n        if (!draggingNode) return;\n        const {\n          value: droppingPosition\n        } = droppingPositionRef;\n        if (!droppingPosition) return;\n        const {\n          value: droppingMouseNode\n        } = droppingMouseNodeRef;\n        if (!droppingMouseNode) {\n          return;\n        }\n        const {\n          tmNode\n        } = props;\n        if (tmNode.key === droppingMouseNode.key) return true;\n        return false;\n      }),\n      showDropMarkAsParent: useMemo(() => {\n        const {\n          value: droppingNodeParent\n        } = droppingNodeParentRef;\n        if (!droppingNodeParent) return false;\n        const {\n          tmNode\n        } = props;\n        const {\n          value: droppingPosition\n        } = droppingPositionRef;\n        if (droppingPosition === 'before' || droppingPosition === 'after') {\n          return droppingNodeParent.key === tmNode.key;\n        }\n        return false;\n      }),\n      pending: useMemo(() => NTree.pendingNodeKeyRef.value === props.tmNode.key),\n      loading: useMemo(() => NTree.loadingKeysRef.value.has(props.tmNode.key)),\n      highlight: useMemo(() => {\n        var _a;\n        return (_a = NTree.highlightKeySetRef.value) === null || _a === void 0 ? void 0 : _a.has(props.tmNode.key);\n      }),\n      checked: checkedRef,\n      indeterminate: useMemo(() => NTree.displayedIndeterminateKeysRef.value.includes(props.tmNode.key)),\n      selected: useMemo(() => NTree.mergedSelectedKeysRef.value.includes(props.tmNode.key)),\n      expanded: useMemo(() => NTree.mergedExpandedKeysRef.value.includes(props.tmNode.key)),\n      disabled: disabledRef,\n      checkable: checkableRef,\n      mergedCheckOnClick: mergedCheckOnClickRef,\n      checkboxDisabled: checkboxDisabledRef,\n      selectable: selectableRef,\n      expandOnClick: NTree.expandOnClickRef,\n      internalScrollable: NTree.internalScrollableRef,\n      draggable: NTree.draggableRef,\n      blockLine: blockLineRef,\n      nodeProps: resolvedNodePropsRef,\n      checkboxFocusable: NTree.internalCheckboxFocusableRef,\n      droppingPosition: droppingPositionRef,\n      droppingOffsetLevel: droppingOffsetLevelRef,\n      indent: indentRef,\n      checkboxPlacement: checkboxPlacementRef,\n      showLine: showLineRef,\n      contentInstRef,\n      contentElRef,\n      indentNodes,\n      handleCheck,\n      handleDrop,\n      handleDragStart,\n      handleDragEnter,\n      handleDragOver,\n      handleDragEnd,\n      handleDragLeave,\n      handleLineClick,\n      handleContentClick,\n      handleSwitcherClick\n    };\n  },\n  render() {\n    const {\n      tmNode,\n      clsPrefix,\n      checkable,\n      expandOnClick,\n      selectable,\n      selected,\n      checked,\n      highlight,\n      draggable,\n      blockLine,\n      indent,\n      indentNodes,\n      disabled,\n      pending,\n      internalScrollable,\n      nodeProps,\n      checkboxPlacement\n    } = this;\n    // drag start not inside\n    // it need to be append to node itself, not wrapper\n    const dragEventHandlers = draggable && !disabled ? {\n      onDragenter: this.handleDragEnter,\n      onDragleave: this.handleDragLeave,\n      onDragend: this.handleDragEnd,\n      onDrop: this.handleDrop,\n      onDragover: this.handleDragOver\n    } : undefined;\n    // In non virtual mode, there's no evidence that which element should be\n    // scrolled to, so we need data-key to query the target element.\n    const dataKey = internalScrollable ? createDataKey(tmNode.key) : undefined;\n    const checkboxOnRight = checkboxPlacement === 'right';\n    const checkboxNode = checkable ? h(NTreeNodeCheckbox, {\n      indent: indent,\n      right: checkboxOnRight,\n      focusable: this.checkboxFocusable,\n      disabled: disabled || this.checkboxDisabled,\n      clsPrefix: clsPrefix,\n      checked: this.checked,\n      indeterminate: this.indeterminate,\n      onCheck: this.handleCheck\n    }) : null;\n    return h(\"div\", Object.assign({\n      class: `${clsPrefix}-tree-node-wrapper`\n    }, dragEventHandlers), h(\"div\", Object.assign({}, blockLine ? nodeProps : undefined, {\n      class: [`${clsPrefix}-tree-node`, {\n        [`${clsPrefix}-tree-node--selected`]: selected,\n        [`${clsPrefix}-tree-node--checkable`]: checkable,\n        [`${clsPrefix}-tree-node--highlight`]: highlight,\n        [`${clsPrefix}-tree-node--pending`]: pending,\n        [`${clsPrefix}-tree-node--disabled`]: disabled,\n        [`${clsPrefix}-tree-node--selectable`]: selectable,\n        [`${clsPrefix}-tree-node--clickable`]: selectable || expandOnClick || this.mergedCheckOnClick\n      }, nodeProps === null || nodeProps === void 0 ? void 0 : nodeProps.class],\n      \"data-key\": dataKey,\n      draggable: draggable && blockLine,\n      onClick: this.handleLineClick,\n      onDragstart: draggable && blockLine && !disabled ? this.handleDragStart : undefined\n    }), indentNodes, tmNode.isLeaf && this.showLine ? h(\"div\", {\n      class: [`${clsPrefix}-tree-node-indent`, `${clsPrefix}-tree-node-indent--show-line`, tmNode.isLeaf && `${clsPrefix}-tree-node-indent--is-leaf`, tmNode.isLastChild && `${clsPrefix}-tree-node-indent--last-child`]\n    }, h(\"div\", {\n      style: {\n        width: `${indent}px`\n      }\n    })) : h(NTreeNodeSwitcher, {\n      clsPrefix: clsPrefix,\n      expanded: this.expanded,\n      selected: selected,\n      loading: this.loading,\n      hide: tmNode.isLeaf,\n      tmNode: this.tmNode,\n      indent: indent,\n      onClick: this.handleSwitcherClick\n    }), !checkboxOnRight ? checkboxNode : null, h(NTreeNodeContent, {\n      ref: \"contentInstRef\",\n      clsPrefix: clsPrefix,\n      checked: checked,\n      selected: selected,\n      onClick: this.handleContentClick,\n      nodeProps: blockLine ? undefined : nodeProps,\n      onDragstart: draggable && !blockLine && !disabled ? this.handleDragStart : undefined,\n      tmNode: tmNode\n    }), draggable ? this.showDropMark ? renderDropMark({\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      el: this.contentElRef.value,\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      position: this.droppingPosition,\n      offsetLevel: this.droppingOffsetLevel,\n      indent\n    }) : this.showDropMarkAsParent ? renderDropMark({\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      el: this.contentElRef.value,\n      position: 'inside',\n      offsetLevel: this.droppingOffsetLevel,\n      indent\n    }) : null : null, checkboxOnRight ? checkboxNode : null));\n  }\n});\nexport default TreeNode;","map":{"version":3,"names":["h","inject","computed","defineComponent","ref","onMounted","useMemo","happensIn","repeat","createDataKey","NTreeNodeSwitcher","NTreeNodeCheckbox","NTreeNodeContent","treeInjectionKey","renderDropMark","isNodeDisabled","TreeNode","name","props","clsPrefix","type","String","required","tmNode","Object","setup","NTree","droppingNodeParentRef","droppingMouseNodeRef","draggingNodeRef","droppingPositionRef","droppingOffsetLevelRef","nodePropsRef","indentRef","blockLineRef","checkboxPlacementRef","checkOnClickRef","disabledFieldRef","showLineRef","renderSwitcherIconRef","checkboxDisabledRef","rawNode","checkboxDisabled","nodeIsDisabledRef","value","disabledRef","resolvedNodePropsRef","nodeProps","undefined","option","contentInstRef","contentElRef","$el","handleSwitcherClick","callback","isLeaf","shallowLoaded","loadingKeysRef","has","key","add","onLoadRef","onLoad","then","finally","delete","setTimeout","selectableRef","internalTreeSelect","mergedCheckStrategyRef","multipleRef","cascadeRef","checkableRef","checkedRef","displayedCheckedKeysRef","includes","mergedCheckOnClickRef","checkable","checkOnClick","disabled","_handleClick","e","expandOnClick","expandOnClickRef","selectable","mergedCheckOnClick","handleSelect","handleCheck","handleContentClick","_a","_b","onClick","call","handleLineClick","checked","handleDragStart","event","node","handleDragEnter","currentTarget","target","handleDragOver","preventDefault","handleDragEnd","handleDragLeave","handleDrop","dropPosition","indentNodes","indent","cursor","parent","isLastChild","push","class","style","width","reverse","level","showDropMark","draggingNode","droppingPosition","droppingMouseNode","showDropMarkAsParent","droppingNodeParent","pending","pendingNodeKeyRef","loading","highlight","highlightKeySetRef","indeterminate","displayedIndeterminateKeysRef","selected","mergedSelectedKeysRef","expanded","mergedExpandedKeysRef","internalScrollable","internalScrollableRef","draggable","draggableRef","blockLine","checkboxFocusable","internalCheckboxFocusableRef","droppingOffsetLevel","checkboxPlacement","showLine","render","dragEventHandlers","onDragenter","onDragleave","onDragend","onDrop","onDragover","dataKey","checkboxOnRight","checkboxNode","right","focusable","onCheck","assign","onDragstart","hide","el","position","offsetLevel"],"sources":["/home/whw/Vue/whwtest.github.io/node_modules/naive-ui/es/tree/src/TreeNode.js"],"sourcesContent":["import { h, inject, computed, defineComponent, ref, onMounted } from 'vue';\nimport { useMemo } from 'vooks';\nimport { happensIn, repeat } from 'seemly';\nimport { createDataKey } from '../../_utils';\nimport NTreeNodeSwitcher from './TreeNodeSwitcher';\nimport NTreeNodeCheckbox from './TreeNodeCheckbox';\nimport NTreeNodeContent from './TreeNodeContent';\nimport { treeInjectionKey } from './interface';\nimport { renderDropMark } from './dnd';\nimport { isNodeDisabled } from './utils';\nconst TreeNode = defineComponent({\n    name: 'TreeNode',\n    props: {\n        clsPrefix: {\n            type: String,\n            required: true\n        },\n        tmNode: {\n            type: Object,\n            required: true\n        }\n    },\n    setup(props) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const NTree = inject(treeInjectionKey);\n        const { droppingNodeParentRef, droppingMouseNodeRef, draggingNodeRef, droppingPositionRef, droppingOffsetLevelRef, nodePropsRef, indentRef, blockLineRef, checkboxPlacementRef, checkOnClickRef, disabledFieldRef, showLineRef, renderSwitcherIconRef } = NTree;\n        const checkboxDisabledRef = useMemo(() => !!props.tmNode.rawNode.checkboxDisabled);\n        const nodeIsDisabledRef = useMemo(() => {\n            return isNodeDisabled(props.tmNode, disabledFieldRef.value);\n        });\n        const disabledRef = useMemo(() => NTree.disabledRef.value || nodeIsDisabledRef.value);\n        const resolvedNodePropsRef = computed(() => {\n            const { value: nodeProps } = nodePropsRef;\n            if (!nodeProps)\n                return undefined;\n            return nodeProps({ option: props.tmNode.rawNode });\n        });\n        // used for drag and drop\n        const contentInstRef = ref(null);\n        // must be non-reactive\n        const contentElRef = { value: null };\n        onMounted(() => {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            contentElRef.value = contentInstRef.value.$el;\n        });\n        function handleSwitcherClick() {\n            const callback = () => {\n                const { tmNode } = props;\n                if (!tmNode.isLeaf && !tmNode.shallowLoaded) {\n                    if (!NTree.loadingKeysRef.value.has(tmNode.key)) {\n                        NTree.loadingKeysRef.value.add(tmNode.key);\n                    }\n                    else {\n                        return;\n                    }\n                    const { onLoadRef: { value: onLoad } } = NTree;\n                    if (onLoad) {\n                        void onLoad(tmNode.rawNode)\n                            .then((value) => {\n                            if (value !== false) {\n                                NTree.handleSwitcherClick(tmNode);\n                            }\n                        })\n                            .finally(() => {\n                            NTree.loadingKeysRef.value.delete(tmNode.key);\n                        });\n                    }\n                }\n                else {\n                    NTree.handleSwitcherClick(tmNode);\n                }\n            };\n            if (renderSwitcherIconRef.value) {\n                // if renderSwitcherIcon is set, icon dom may be altered before event\n                // bubbles to parent dom, so that target check fails. Call it in next\n                // event loop so that event bubble phase is finishes.\n                setTimeout(callback, 0);\n            }\n            else {\n                callback();\n            }\n        }\n        const selectableRef = useMemo(() => !nodeIsDisabledRef.value &&\n            NTree.selectableRef.value &&\n            (NTree.internalTreeSelect\n                ? NTree.mergedCheckStrategyRef.value !== 'child' ||\n                    (NTree.multipleRef.value && NTree.cascadeRef.value) ||\n                    props.tmNode.isLeaf\n                : true));\n        const checkableRef = useMemo(() => NTree.checkableRef.value &&\n            (NTree.cascadeRef.value ||\n                NTree.mergedCheckStrategyRef.value !== 'child' ||\n                props.tmNode.isLeaf));\n        const checkedRef = useMemo(() => NTree.displayedCheckedKeysRef.value.includes(props.tmNode.key));\n        const mergedCheckOnClickRef = useMemo(() => {\n            const { value: checkable } = checkableRef;\n            if (!checkable)\n                return false;\n            const { value: checkOnClick } = checkOnClickRef;\n            const { tmNode } = props;\n            if (typeof checkOnClick === 'boolean') {\n                return !tmNode.disabled && checkOnClick;\n            }\n            return checkOnClick(props.tmNode.rawNode);\n        });\n        function _handleClick(e) {\n            const { value: expandOnClick } = NTree.expandOnClickRef;\n            const { value: selectable } = selectableRef;\n            const { value: mergedCheckOnClick } = mergedCheckOnClickRef;\n            if (!selectable && !expandOnClick && !mergedCheckOnClick)\n                return;\n            if (happensIn(e, 'checkbox') || happensIn(e, 'switcher'))\n                return;\n            const { tmNode } = props;\n            if (selectable) {\n                NTree.handleSelect(tmNode);\n            }\n            if (expandOnClick && !tmNode.isLeaf) {\n                handleSwitcherClick();\n            }\n            if (mergedCheckOnClick) {\n                handleCheck(!checkedRef.value);\n            }\n        }\n        function handleContentClick(e) {\n            var _a, _b;\n            if (blockLineRef.value)\n                return;\n            if (!disabledRef.value)\n                _handleClick(e);\n            (_b = (_a = resolvedNodePropsRef.value) === null || _a === void 0 ? void 0 : _a.onClick) === null || _b === void 0 ? void 0 : _b.call(_a, e);\n        }\n        function handleLineClick(e) {\n            var _a, _b;\n            if (!blockLineRef.value)\n                return;\n            if (!disabledRef.value) {\n                _handleClick(e);\n            }\n            (_b = (_a = resolvedNodePropsRef.value) === null || _a === void 0 ? void 0 : _a.onClick) === null || _b === void 0 ? void 0 : _b.call(_a, e);\n        }\n        function handleCheck(checked) {\n            NTree.handleCheck(props.tmNode, checked);\n        }\n        // Dnd\n        function handleDragStart(e) {\n            NTree.handleDragStart({\n                event: e,\n                node: props.tmNode\n            });\n        }\n        function handleDragEnter(e) {\n            if (e.currentTarget !== e.target) {\n                return;\n            }\n            NTree.handleDragEnter({\n                event: e,\n                node: props.tmNode\n            });\n        }\n        function handleDragOver(e) {\n            e.preventDefault(); // if not prevent, drop event won't be fired...\n            NTree.handleDragOver({\n                event: e,\n                node: props.tmNode\n            });\n        }\n        function handleDragEnd(e) {\n            NTree.handleDragEnd({\n                event: e,\n                node: props.tmNode\n            });\n        }\n        function handleDragLeave(e) {\n            if (e.currentTarget !== e.target) {\n                return;\n            }\n            NTree.handleDragLeave({\n                event: e,\n                node: props.tmNode\n            });\n        }\n        function handleDrop(e) {\n            e.preventDefault();\n            if (droppingPositionRef.value !== null) {\n                NTree.handleDrop({\n                    event: e,\n                    node: props.tmNode,\n                    dropPosition: droppingPositionRef.value\n                });\n            }\n        }\n        const indentNodes = computed(() => {\n            const { clsPrefix } = props;\n            const { value: indent } = indentRef;\n            if (showLineRef.value) {\n                const indentNodes = [];\n                let cursor = props.tmNode.parent;\n                while (cursor) {\n                    if (cursor.isLastChild) {\n                        indentNodes.push(h(\"div\", { class: `${clsPrefix}-tree-node-indent` },\n                            h(\"div\", { style: { width: `${indent}px` } })));\n                    }\n                    else {\n                        indentNodes.push(h(\"div\", { class: [\n                                `${clsPrefix}-tree-node-indent`,\n                                `${clsPrefix}-tree-node-indent--show-line`\n                            ] },\n                            h(\"div\", { style: { width: `${indent}px` } })));\n                    }\n                    cursor = cursor.parent;\n                }\n                return indentNodes.reverse();\n            }\n            else {\n                return repeat(props.tmNode.level, h(\"div\", { class: `${props.clsPrefix}-tree-node-indent` },\n                    h(\"div\", { style: { width: `${indent}px` } })));\n            }\n        });\n        return {\n            showDropMark: useMemo(() => {\n                const { value: draggingNode } = draggingNodeRef;\n                if (!draggingNode)\n                    return;\n                const { value: droppingPosition } = droppingPositionRef;\n                if (!droppingPosition)\n                    return;\n                const { value: droppingMouseNode } = droppingMouseNodeRef;\n                if (!droppingMouseNode) {\n                    return;\n                }\n                const { tmNode } = props;\n                if (tmNode.key === droppingMouseNode.key)\n                    return true;\n                return false;\n            }),\n            showDropMarkAsParent: useMemo(() => {\n                const { value: droppingNodeParent } = droppingNodeParentRef;\n                if (!droppingNodeParent)\n                    return false;\n                const { tmNode } = props;\n                const { value: droppingPosition } = droppingPositionRef;\n                if (droppingPosition === 'before' || droppingPosition === 'after') {\n                    return droppingNodeParent.key === tmNode.key;\n                }\n                return false;\n            }),\n            pending: useMemo(() => NTree.pendingNodeKeyRef.value === props.tmNode.key),\n            loading: useMemo(() => NTree.loadingKeysRef.value.has(props.tmNode.key)),\n            highlight: useMemo(() => {\n                var _a;\n                return (_a = NTree.highlightKeySetRef.value) === null || _a === void 0 ? void 0 : _a.has(props.tmNode.key);\n            }),\n            checked: checkedRef,\n            indeterminate: useMemo(() => NTree.displayedIndeterminateKeysRef.value.includes(props.tmNode.key)),\n            selected: useMemo(() => NTree.mergedSelectedKeysRef.value.includes(props.tmNode.key)),\n            expanded: useMemo(() => NTree.mergedExpandedKeysRef.value.includes(props.tmNode.key)),\n            disabled: disabledRef,\n            checkable: checkableRef,\n            mergedCheckOnClick: mergedCheckOnClickRef,\n            checkboxDisabled: checkboxDisabledRef,\n            selectable: selectableRef,\n            expandOnClick: NTree.expandOnClickRef,\n            internalScrollable: NTree.internalScrollableRef,\n            draggable: NTree.draggableRef,\n            blockLine: blockLineRef,\n            nodeProps: resolvedNodePropsRef,\n            checkboxFocusable: NTree.internalCheckboxFocusableRef,\n            droppingPosition: droppingPositionRef,\n            droppingOffsetLevel: droppingOffsetLevelRef,\n            indent: indentRef,\n            checkboxPlacement: checkboxPlacementRef,\n            showLine: showLineRef,\n            contentInstRef,\n            contentElRef,\n            indentNodes,\n            handleCheck,\n            handleDrop,\n            handleDragStart,\n            handleDragEnter,\n            handleDragOver,\n            handleDragEnd,\n            handleDragLeave,\n            handleLineClick,\n            handleContentClick,\n            handleSwitcherClick\n        };\n    },\n    render() {\n        const { tmNode, clsPrefix, checkable, expandOnClick, selectable, selected, checked, highlight, draggable, blockLine, indent, indentNodes, disabled, pending, internalScrollable, nodeProps, checkboxPlacement } = this;\n        // drag start not inside\n        // it need to be append to node itself, not wrapper\n        const dragEventHandlers = draggable && !disabled\n            ? {\n                onDragenter: this.handleDragEnter,\n                onDragleave: this.handleDragLeave,\n                onDragend: this.handleDragEnd,\n                onDrop: this.handleDrop,\n                onDragover: this.handleDragOver\n            }\n            : undefined;\n        // In non virtual mode, there's no evidence that which element should be\n        // scrolled to, so we need data-key to query the target element.\n        const dataKey = internalScrollable ? createDataKey(tmNode.key) : undefined;\n        const checkboxOnRight = checkboxPlacement === 'right';\n        const checkboxNode = checkable ? (h(NTreeNodeCheckbox, { indent: indent, right: checkboxOnRight, focusable: this.checkboxFocusable, disabled: disabled || this.checkboxDisabled, clsPrefix: clsPrefix, checked: this.checked, indeterminate: this.indeterminate, onCheck: this.handleCheck })) : null;\n        return (h(\"div\", Object.assign({ class: `${clsPrefix}-tree-node-wrapper` }, dragEventHandlers),\n            h(\"div\", Object.assign({}, (blockLine ? nodeProps : undefined), { class: [\n                    `${clsPrefix}-tree-node`,\n                    {\n                        [`${clsPrefix}-tree-node--selected`]: selected,\n                        [`${clsPrefix}-tree-node--checkable`]: checkable,\n                        [`${clsPrefix}-tree-node--highlight`]: highlight,\n                        [`${clsPrefix}-tree-node--pending`]: pending,\n                        [`${clsPrefix}-tree-node--disabled`]: disabled,\n                        [`${clsPrefix}-tree-node--selectable`]: selectable,\n                        [`${clsPrefix}-tree-node--clickable`]: selectable || expandOnClick || this.mergedCheckOnClick\n                    },\n                    nodeProps === null || nodeProps === void 0 ? void 0 : nodeProps.class\n                ], \"data-key\": dataKey, draggable: draggable && blockLine, onClick: this.handleLineClick, onDragstart: draggable && blockLine && !disabled\n                    ? this.handleDragStart\n                    : undefined }),\n                indentNodes,\n                tmNode.isLeaf && this.showLine ? (h(\"div\", { class: [\n                        `${clsPrefix}-tree-node-indent`,\n                        `${clsPrefix}-tree-node-indent--show-line`,\n                        tmNode.isLeaf && `${clsPrefix}-tree-node-indent--is-leaf`,\n                        tmNode.isLastChild &&\n                            `${clsPrefix}-tree-node-indent--last-child`\n                    ] },\n                    h(\"div\", { style: { width: `${indent}px` } }))) : (h(NTreeNodeSwitcher, { clsPrefix: clsPrefix, expanded: this.expanded, selected: selected, loading: this.loading, hide: tmNode.isLeaf, tmNode: this.tmNode, indent: indent, onClick: this.handleSwitcherClick })),\n                !checkboxOnRight ? checkboxNode : null,\n                h(NTreeNodeContent, { ref: \"contentInstRef\", clsPrefix: clsPrefix, checked: checked, selected: selected, onClick: this.handleContentClick, nodeProps: blockLine ? undefined : nodeProps, onDragstart: draggable && !blockLine && !disabled\n                        ? this.handleDragStart\n                        : undefined, tmNode: tmNode }),\n                draggable\n                    ? this.showDropMark\n                        ? renderDropMark({\n                            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                            el: this.contentElRef.value,\n                            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                            position: this.droppingPosition,\n                            offsetLevel: this.droppingOffsetLevel,\n                            indent\n                        })\n                        : this.showDropMarkAsParent\n                            ? renderDropMark({\n                                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                                el: this.contentElRef.value,\n                                position: 'inside',\n                                offsetLevel: this.droppingOffsetLevel,\n                                indent\n                            })\n                            : null\n                    : null,\n                checkboxOnRight ? checkboxNode : null)));\n    }\n});\nexport default TreeNode;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
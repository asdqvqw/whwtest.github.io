{"ast":null,"code":"import { h, defineComponent, ref, mergeProps } from 'vue';\nimport { useMergedClsPrefix } from '../../_mixins/use-config';\nimport { useStyle } from '../../_mixins';\nimport Ellipsis, { createCursorClass, createLineClampClass, ellipsisProps } from './Ellipsis';\nimport style from './styles/index.cssr';\nexport const NPerformantEllipsis = defineComponent({\n  name: 'PerformantEllipsis',\n  props: ellipsisProps,\n  inheritAttrs: false,\n  setup(props, {\n    attrs,\n    slots\n  }) {\n    const mouseEnteredRef = ref(false);\n    const mergedClsPrefixRef = useMergedClsPrefix();\n    useStyle('-ellipsis', style, mergedClsPrefixRef);\n    // Modified from Ellipsis.tsx\n    const renderTrigger = () => {\n      const {\n        lineClamp\n      } = props;\n      const mergedClsPrefix = mergedClsPrefixRef.value;\n      return h(\"span\", Object.assign({}, mergeProps(attrs, {\n        class: [`${mergedClsPrefix}-ellipsis`, lineClamp !== undefined ? createLineClampClass(mergedClsPrefix) : undefined, props.expandTrigger === 'click' ? createCursorClass(mergedClsPrefix, 'pointer') : undefined],\n        style: lineClamp === undefined ? {\n          textOverflow: 'ellipsis'\n        } : {\n          '-webkit-line-clamp': lineClamp\n        }\n      }), {\n        onMouseenter: () => {\n          mouseEnteredRef.value = true;\n        }\n      }), lineClamp ? slots : h(\"span\", null, slots));\n    };\n    return {\n      mouseEntered: mouseEnteredRef,\n      renderTrigger\n    };\n  },\n  render() {\n    if (this.mouseEntered) {\n      return h(Ellipsis, mergeProps({}, this.$attrs, this.$props), this.$slots);\n    } else {\n      return this.renderTrigger();\n    }\n  }\n});","map":{"version":3,"names":["h","defineComponent","ref","mergeProps","useMergedClsPrefix","useStyle","Ellipsis","createCursorClass","createLineClampClass","ellipsisProps","style","NPerformantEllipsis","name","props","inheritAttrs","setup","attrs","slots","mouseEnteredRef","mergedClsPrefixRef","renderTrigger","lineClamp","mergedClsPrefix","value","Object","assign","class","undefined","expandTrigger","textOverflow","onMouseenter","mouseEntered","render","$attrs","$props","$slots"],"sources":["/home/whw/Vue/whwtest.github.io/node_modules/naive-ui/es/ellipsis/src/PerformantEllipsis.js"],"sourcesContent":["import { h, defineComponent, ref, mergeProps } from 'vue';\nimport { useMergedClsPrefix } from '../../_mixins/use-config';\nimport { useStyle } from '../../_mixins';\nimport Ellipsis, { createCursorClass, createLineClampClass, ellipsisProps } from './Ellipsis';\nimport style from './styles/index.cssr';\nexport const NPerformantEllipsis = defineComponent({\n    name: 'PerformantEllipsis',\n    props: ellipsisProps,\n    inheritAttrs: false,\n    setup(props, { attrs, slots }) {\n        const mouseEnteredRef = ref(false);\n        const mergedClsPrefixRef = useMergedClsPrefix();\n        useStyle('-ellipsis', style, mergedClsPrefixRef);\n        // Modified from Ellipsis.tsx\n        const renderTrigger = () => {\n            const { lineClamp } = props;\n            const mergedClsPrefix = mergedClsPrefixRef.value;\n            return (h(\"span\", Object.assign({}, mergeProps(attrs, {\n                class: [\n                    `${mergedClsPrefix}-ellipsis`,\n                    lineClamp !== undefined\n                        ? createLineClampClass(mergedClsPrefix)\n                        : undefined,\n                    props.expandTrigger === 'click'\n                        ? createCursorClass(mergedClsPrefix, 'pointer')\n                        : undefined\n                ],\n                style: lineClamp === undefined\n                    ? {\n                        textOverflow: 'ellipsis'\n                    }\n                    : {\n                        '-webkit-line-clamp': lineClamp\n                    }\n            }), { onMouseenter: () => {\n                    mouseEnteredRef.value = true;\n                } }), lineClamp ? slots : h(\"span\", null, slots)));\n        };\n        return {\n            mouseEntered: mouseEnteredRef,\n            renderTrigger\n        };\n    },\n    render() {\n        if (this.mouseEntered) {\n            return h(Ellipsis, mergeProps({}, this.$attrs, this.$props), this.$slots);\n        }\n        else {\n            return this.renderTrigger();\n        }\n    }\n});\n"],"mappings":"AAAA,SAASA,CAAC,EAAEC,eAAe,EAAEC,GAAG,EAAEC,UAAU,QAAQ,KAAK;AACzD,SAASC,kBAAkB,QAAQ,0BAA0B;AAC7D,SAASC,QAAQ,QAAQ,eAAe;AACxC,OAAOC,QAAQ,IAAIC,iBAAiB,EAAEC,oBAAoB,EAAEC,aAAa,QAAQ,YAAY;AAC7F,OAAOC,KAAK,MAAM,qBAAqB;AACvC,OAAO,MAAMC,mBAAmB,GAAGV,eAAe,CAAC;EAC/CW,IAAI,EAAE,oBAAoB;EAC1BC,KAAK,EAAEJ,aAAa;EACpBK,YAAY,EAAE,KAAK;EACnBC,KAAKA,CAACF,KAAK,EAAE;IAAEG,KAAK;IAAEC;EAAM,CAAC,EAAE;IAC3B,MAAMC,eAAe,GAAGhB,GAAG,CAAC,KAAK,CAAC;IAClC,MAAMiB,kBAAkB,GAAGf,kBAAkB,CAAC,CAAC;IAC/CC,QAAQ,CAAC,WAAW,EAAEK,KAAK,EAAES,kBAAkB,CAAC;IAChD;IACA,MAAMC,aAAa,GAAGA,CAAA,KAAM;MACxB,MAAM;QAAEC;MAAU,CAAC,GAAGR,KAAK;MAC3B,MAAMS,eAAe,GAAGH,kBAAkB,CAACI,KAAK;MAChD,OAAQvB,CAAC,CAAC,MAAM,EAAEwB,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEtB,UAAU,CAACa,KAAK,EAAE;QAClDU,KAAK,EAAE,CACF,GAAEJ,eAAgB,WAAU,EAC7BD,SAAS,KAAKM,SAAS,GACjBnB,oBAAoB,CAACc,eAAe,CAAC,GACrCK,SAAS,EACfd,KAAK,CAACe,aAAa,KAAK,OAAO,GACzBrB,iBAAiB,CAACe,eAAe,EAAE,SAAS,CAAC,GAC7CK,SAAS,CAClB;QACDjB,KAAK,EAAEW,SAAS,KAAKM,SAAS,GACxB;UACEE,YAAY,EAAE;QAClB,CAAC,GACC;UACE,oBAAoB,EAAER;QAC1B;MACR,CAAC,CAAC,EAAE;QAAES,YAAY,EAAEA,CAAA,KAAM;UAClBZ,eAAe,CAACK,KAAK,GAAG,IAAI;QAChC;MAAE,CAAC,CAAC,EAAEF,SAAS,GAAGJ,KAAK,GAAGjB,CAAC,CAAC,MAAM,EAAE,IAAI,EAAEiB,KAAK,CAAC,CAAC;IACzD,CAAC;IACD,OAAO;MACHc,YAAY,EAAEb,eAAe;MAC7BE;IACJ,CAAC;EACL,CAAC;EACDY,MAAMA,CAAA,EAAG;IACL,IAAI,IAAI,CAACD,YAAY,EAAE;MACnB,OAAO/B,CAAC,CAACM,QAAQ,EAAEH,UAAU,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC8B,MAAM,EAAE,IAAI,CAACC,MAAM,CAAC,EAAE,IAAI,CAACC,MAAM,CAAC;IAC7E,CAAC,MACI;MACD,OAAO,IAAI,CAACf,aAAa,CAAC,CAAC;IAC/B;EACJ;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}